{"version":3,"file":"main.js","mappings":"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","sources":["webpack://tessellation-webgl/./src/ts/engine/engine-metrics.ts","webpack://tessellation-webgl/./src/ts/engine/engine.ts","webpack://tessellation-webgl/./src/ts/engine/simulation-monothreaded.ts","webpack://tessellation-webgl/./src/ts/engine/simulation-multithreaded.ts","webpack://tessellation-webgl/./src/ts/engine/simulation.ts","webpack://tessellation-webgl/./src/ts/engine/tree-node.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/from-worker/download-as-svg-output.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/from-worker/messages.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/from-worker/new-metrics.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/from-worker/perform-update-no-output.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/from-worker/perform-update-output.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/from-worker/recompute-colors-output.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/from-worker/reset-output.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/message.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/to-worker/download-as-svg-message.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/to-worker/messages.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/to-worker/perform-update-message.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/to-worker/recompute-color-message.ts","webpack://tessellation-webgl/./src/ts/engine/worker/messages/to-worker/reset-message.ts","webpack://tessellation-webgl/./src/ts/main.ts","webpack://tessellation-webgl/./src/ts/misc/arithmetics.ts","webpack://tessellation-webgl/./src/ts/misc/color.ts","webpack://tessellation-webgl/./src/ts/misc/frame-time-monitor.ts","webpack://tessellation-webgl/./src/ts/misc/loader.ts","webpack://tessellation-webgl/./src/ts/misc/polyfills.ts","webpack://tessellation-webgl/./src/ts/misc/rectangle.ts","webpack://tessellation-webgl/./src/ts/misc/throttle.ts","webpack://tessellation-webgl/./src/ts/misc/web.ts","webpack://tessellation-webgl/./src/ts/misc/zoom.ts","webpack://tessellation-webgl/./src/ts/page-interface-generated.ts","webpack://tessellation-webgl/./src/ts/parameters.ts","webpack://tessellation-webgl/./src/ts/plotter/geometry-id.ts","webpack://tessellation-webgl/./src/ts/plotter/gl-utils/gl-canvas.ts","webpack://tessellation-webgl/./src/ts/plotter/gl-utils/gl-resource.ts","webpack://tessellation-webgl/./src/ts/plotter/gl-utils/shader-manager.ts","webpack://tessellation-webgl/./src/ts/plotter/gl-utils/shader-sources.ts","webpack://tessellation-webgl/./src/ts/plotter/gl-utils/shader.ts","webpack://tessellation-webgl/./src/ts/plotter/gl-utils/viewport.ts","webpack://tessellation-webgl/./src/ts/plotter/plotter-canvas-2d.ts","webpack://tessellation-webgl/./src/ts/plotter/plotter-canvas.ts","webpack://tessellation-webgl/./src/ts/plotter/plotter-svg.ts","webpack://tessellation-webgl/./src/ts/plotter/plotter-webgl-basic.ts","webpack://tessellation-webgl/./src/ts/plotter/plotter-webgl.ts","webpack://tessellation-webgl/./src/ts/plotter/vbo-types.ts","webpack://tessellation-webgl/./src/ts/primitives/primitive-base.ts","webpack://tessellation-webgl/./src/ts/primitives/primitive-quads.ts","webpack://tessellation-webgl/./src/ts/primitives/primitive-triangles-nested.ts","webpack://tessellation-webgl/./src/ts/primitives/primitive-triangles.ts","webpack://tessellation-webgl/./src/ts/primitives/primitive-type-enum.ts","webpack://tessellation-webgl/./src/ts/testing/main-testing.ts","webpack://tessellation-webgl/./src/ts/testing/test-engine.ts","webpack://tessellation-webgl/webpack/bootstrap","webpack://tessellation-webgl/webpack/before-startup","webpack://tessellation-webgl/webpack/startup","webpack://tessellation-webgl/webpack/after-startup"],"sourcesContent":["interface IEngineMetrics {\r\n    treeDepth: number;\r\n    lastLayerPrimitivesCount: number;\r\n    totalPrimitivesCount: number;\r\n    segmentsCount: number;\r\n}\r\n\r\nfunction updateEngineMetricsIndicators(metrics: IEngineMetrics): void {\r\n    Page.Canvas.setIndicatorText(\"tree-depth\", metrics.treeDepth.toString());\r\n    Page.Canvas.setIndicatorText(\"primitives-count\", metrics.lastLayerPrimitivesCount.toString());\r\n    Page.Canvas.setIndicatorText(\"tree-nodes-count\", metrics.totalPrimitivesCount.toString());\r\n    Page.Canvas.setIndicatorText(\"segments-count\", metrics.segmentsCount.toString());\r\n}\r\n\r\nexport {\r\n    IEngineMetrics,\r\n    updateEngineMetricsIndicators,\r\n};\r\n\r\n","import { Color } from \"../misc/color\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { GeometryId } from \"../plotter/geometry-id\";\r\nimport { BatchOfLines, IBatch, Line } from \"../plotter/types\";\r\nimport { EVisibility, PrimitiveBase } from \"../primitives/primitive-base\";\r\nimport { PrimitiveQuads } from \"../primitives/primitive-quads\";\r\nimport { PrimitiveTriangles } from \"../primitives/primitive-triangles\";\r\nimport { PrimitiveTrianglesNested } from \"../primitives/primitive-triangles-nested\";\r\nimport { EPrimitiveType } from \"../primitives/primitive-type-enum\";\r\nimport { IEngineMetrics } from \"./engine-metrics\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\ntype BatchOfPrimitives = IBatch<PrimitiveBase>;\r\n\r\ninterface ILayer {\r\n    primitives: BatchOfPrimitives;\r\n    outlines: BatchOfLines;\r\n    readonly birthTimestamp: number;\r\n}\r\n\r\nabstract class Engine {\r\n    private rootPrimitive: PrimitiveBase;\r\n    protected layers: ILayer[];\r\n\r\n    public constructor() {\r\n        this.reset(new Rectangle(0, 512, 0, 512), EPrimitiveType.TRIANGLES);\r\n    }\r\n\r\n    public reset(viewport: Rectangle, primitiveType: EPrimitiveType): void {\r\n        if (primitiveType === EPrimitiveType.QUADS) {\r\n            this.rootPrimitive = new PrimitiveQuads(\r\n                { x: viewport.left, y: viewport.top },\r\n                { x: viewport.right, y: viewport.top },\r\n                { x: viewport.left, y: viewport.bottom },\r\n                { x: viewport.right, y: viewport.bottom },\r\n                this.computeRootPrimitiveColor(),\r\n            );\r\n        } else if (primitiveType === EPrimitiveType.TRIANGLES) {\r\n            this.rootPrimitive = new PrimitiveTriangles(\r\n                { x: viewport.left, y: viewport.bottom },\r\n                { x: viewport.right, y: viewport.bottom },\r\n                { x: 0, y: viewport.top },\r\n                this.computeRootPrimitiveColor(),\r\n            );\r\n        } else {\r\n            this.rootPrimitive = new PrimitiveTrianglesNested(\r\n                { x: viewport.left, y: viewport.bottom },\r\n                { x: viewport.right, y: viewport.bottom },\r\n                { x: 0, y: viewport.top },\r\n                this.computeRootPrimitiveColor(),\r\n            );\r\n        }\r\n\r\n        this.layers = [{\r\n            primitives: {\r\n                items: [this.rootPrimitive],\r\n                geometryId: GeometryId.new(),\r\n            },\r\n            outlines: {\r\n                items: [this.rootPrimitive.getOutline()],\r\n                geometryId: GeometryId.new(),\r\n            },\r\n            birthTimestamp: performance.now(),\r\n        }];\r\n\r\n        this.onNewMetrics(this.computeMetrics());\r\n    }\r\n\r\n    public recomputeColors(colorVariation: number): void {\r\n        const newColor = this.computeRootPrimitiveColor();\r\n        this.rootPrimitive.setColor(newColor, colorVariation);\r\n\r\n        // The colors of the primitive in the VBO so we need to reupload it.\r\n        for (const layer of this.layers) {\r\n            layer.primitives.geometryId.registerChange();\r\n        }\r\n    }\r\n\r\n    public performUpdate(zoomToApply: Zoom, viewport: Rectangle, wantedDepth: number, subdivisionBalance: number, colorVariation: number): boolean {\r\n        let somethingChanged = false;\r\n\r\n        const viewportAfterZoom = viewport.computeNewRectangleAfterZoom(zoomToApply);\r\n        somethingChanged = this.handleRecycling(viewportAfterZoom) || somethingChanged;\r\n        somethingChanged = this.applyZoom(zoomToApply) || somethingChanged;\r\n        somethingChanged = this.adjustLayersCount(wantedDepth, subdivisionBalance, colorVariation) || somethingChanged;\r\n\r\n        if (somethingChanged) {\r\n            for (const layer of this.layers) {\r\n                layer.primitives.geometryId.registerChange();\r\n                layer.outlines.geometryId.registerChange();\r\n            }\r\n\r\n            this.onNewMetrics(this.computeMetrics());\r\n        }\r\n\r\n        return somethingChanged;\r\n    }\r\n\r\n    protected abstract onNewMetrics(newMetrics: IEngineMetrics): void;\r\n\r\n    private computeMetrics(): IEngineMetrics {\r\n        const treeDepth = this.rootPrimitive.treeDepth();\r\n        const lastLayerPrimitivesCount = this.layers[this.layers.length - 1].primitives.items.length;\r\n        let totalPrimitivesCount = 0;\r\n        let segmentsCount = 0;\r\n\r\n        for (const layer of this.layers) {\r\n            totalPrimitivesCount += layer.primitives.items.length;\r\n\r\n            for (const line of layer.outlines.items) {\r\n                const nbLinePoints = line.length;\r\n                segmentsCount += (nbLinePoints > 1) ? (nbLinePoints - 1) : 0;\r\n            }\r\n        }\r\n\r\n        return {\r\n            treeDepth,\r\n            lastLayerPrimitivesCount,\r\n            totalPrimitivesCount,\r\n            segmentsCount,\r\n        };\r\n    }\r\n\r\n    private computeRootPrimitiveColor(): Color {\r\n        const minLuminosity = 0.3;\r\n        const maxLuminosity = 0.7;\r\n        const maxNbTries = 10;\r\n\r\n        let bestColor = Color.random();\r\n\r\n        for (let iTry = 0; iTry < maxNbTries; iTry++) {\r\n            const luminosity = bestColor.luminosity;\r\n            if (luminosity < minLuminosity) {\r\n                const newCandidate = Color.random();\r\n                if (newCandidate.luminosity > luminosity) {\r\n                    bestColor = newCandidate;\r\n                }\r\n            } else if (luminosity > maxLuminosity) {\r\n                const newCandidate = Color.random();\r\n                if (newCandidate.luminosity < luminosity) {\r\n                    bestColor = newCandidate;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return bestColor;\r\n    }\r\n\r\n    private applyZoom(zoomToApply: Zoom): boolean {\r\n        let appliedZoom = false;\r\n\r\n        if (zoomToApply.isNotNull()) {\r\n            this.rootPrimitive.zoom(zoomToApply, true);\r\n            appliedZoom = true;\r\n        }\r\n\r\n        return appliedZoom;\r\n    }\r\n\r\n    private handleRecycling(viewport: Rectangle): boolean {\r\n        if (this.rootPrimitive.computeVisibility(viewport) === EVisibility.OUT_OF_VIEW) {\r\n            this.reset(viewport, this.primitiveType);\r\n            return true;\r\n        } else {\r\n            const prunedPrimitives = this.prunePrimitivesOutOfView(this.rootPrimitive, viewport);\r\n            const changedRootPrimitive = this.changeRootPrimitiveIfNeeded();\r\n\r\n            if (prunedPrimitives) {\r\n                this.rebuildLayersCollections();\r\n                return true;\r\n            }\r\n\r\n            return changedRootPrimitive || prunedPrimitives;\r\n        }\r\n    }\r\n\r\n    private adjustLayersCount(wantedDepth: number, subdivisionBalance: number, colorVariation: number): boolean {\r\n        const lastLayer = this.layers[this.layers.length - 1];\r\n        const idealPrimitivesCountForLastLayer = Math.pow(2, wantedDepth - 1);\r\n        const currentPrimitivesCountForLastLayer = lastLayer.primitives.items.length;\r\n\r\n        const subdivisionFactor = this.rootPrimitive.subdivisionFactor;\r\n        if (currentPrimitivesCountForLastLayer <= idealPrimitivesCountForLastLayer / subdivisionFactor) {\r\n            // subdivide once more\r\n            const primitivesOfNewLayer: BatchOfPrimitives = {\r\n                items: [],\r\n                geometryId: GeometryId.new(),\r\n            };\r\n            const outlinesOfNewLayer: BatchOfLines = {\r\n                items: [],\r\n                geometryId: GeometryId.new(),\r\n            };\r\n\r\n            for (const primitive of lastLayer.primitives.items) {\r\n                primitive.subdivide(subdivisionBalance, colorVariation);\r\n                Array.prototype.push.apply(primitivesOfNewLayer.items, primitive.getDirectChildren() as PrimitiveBase[]);\r\n                outlinesOfNewLayer.items.push(primitive.subdivision);\r\n            }\r\n\r\n            this.layers.push({\r\n                primitives: primitivesOfNewLayer,\r\n                outlines: outlinesOfNewLayer,\r\n                birthTimestamp: performance.now()\r\n            });\r\n        } else if (currentPrimitivesCountForLastLayer >= subdivisionFactor * idealPrimitivesCountForLastLayer) {\r\n            // remove last subdivision\r\n            for (const primitive of lastLayer.primitives.items) {\r\n                primitive.removeChildren();\r\n            }\r\n            this.layers.pop();\r\n        } else { // nothing to do\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeRootPrimitiveIfNeeded(): boolean {\r\n        const directChildrenOfRoot = this.rootPrimitive.getDirectChildren();\r\n        if (directChildrenOfRoot.length === 1) {\r\n            this.rootPrimitive = directChildrenOfRoot[0] as PrimitiveBase;\r\n            this.layers.shift();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private prunePrimitivesOutOfView(primitive: PrimitiveBase, viewport: Rectangle): boolean {\r\n        let changedSomething = false;\r\n\r\n        const directChildren = primitive.getDirectChildren() as PrimitiveBase[];\r\n        for (const child of directChildren) {\r\n            const visibility = child.computeVisibility(viewport);\r\n            if (visibility === EVisibility.OUT_OF_VIEW) {\r\n                primitive.removeChild(child);\r\n                changedSomething = true;\r\n            } else if (visibility === EVisibility.PARTIALLY_VISIBLE) {\r\n                // if it is partially visible, some of its children may be completely out of view\r\n                if (this.prunePrimitivesOutOfView(child, viewport)) {\r\n                    changedSomething = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return changedSomething;\r\n    }\r\n\r\n    private rebuildLayersCollections(): void {\r\n        for (let iLayer = 0; iLayer < this.layers.length; iLayer++) {\r\n            const reparsedLayerPrimitives = this.rootPrimitive.getChildrenOfDepth(iLayer) as PrimitiveBase[];\r\n            this.layers[iLayer].primitives.items = reparsedLayerPrimitives;\r\n            this.layers[iLayer].primitives.geometryId.registerChange();\r\n\r\n            const reparsedLayerOutlines: Line[] = [];\r\n            if (iLayer === 0) {\r\n                reparsedLayerOutlines.push(this.rootPrimitive.getOutline());\r\n            } else {\r\n                const primitivesOfParentLayer = this.layers[iLayer - 1].primitives;\r\n                for (const primitive of primitivesOfParentLayer.items) {\r\n                    reparsedLayerOutlines.push(primitive.subdivision);\r\n                }\r\n            }\r\n            this.layers[iLayer].outlines.items = reparsedLayerOutlines;\r\n            this.layers[iLayer].outlines.geometryId.registerChange();\r\n        }\r\n    }\r\n\r\n    private get primitiveType(): EPrimitiveType {\r\n        return this.rootPrimitive.primitiveType;\r\n    }\r\n}\r\n\r\nexport { Engine };\r\n\r\n","import { Color } from \"../misc/color\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Throttle } from \"../misc/throttle\";\r\nimport { downloadSvgOutput } from \"../misc/web\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { IPlotter } from \"../plotter/plotter-interface\";\r\nimport { PlotterSVG } from \"../plotter/plotter-svg\";\r\nimport { Engine } from \"./engine\";\r\nimport { IEngineMetrics, updateEngineMetricsIndicators } from \"./engine-metrics\";\r\nimport { computeLastLayerAlpha, ISimulation } from \"./simulation\";\r\n\r\n\r\nclass SimulationMonothreaded extends Engine implements ISimulation<IPlotter> {\r\n    private cumulatedZoom: Zoom = Zoom.noZoom();\r\n    private readonly maintainanceThrottle: Throttle = new Throttle(100);\r\n\r\n    public update(viewport: Rectangle, instantZoom: Zoom, wantedDepth: number, subdivisionBalance: number, colorVariation: number): boolean {\r\n        this.cumulatedZoom = Zoom.multiply(instantZoom, this.cumulatedZoom);\r\n\r\n        // don't do maintainance too often because it is costly\r\n        let changedSomething = false;\r\n        this.maintainanceThrottle.runIfAvailable(() => {\r\n            changedSomething = this.performUpdate(this.cumulatedZoom, viewport, wantedDepth, subdivisionBalance, colorVariation);\r\n            this.cumulatedZoom = Zoom.noZoom();\r\n        });\r\n        return changedSomething;\r\n    }\r\n\r\n    public draw(plotter: IPlotter, scaling: number, backgroundColor: Color, linesColor?: Color): void {\r\n        if (this.layers.length < 1) {\r\n            return;\r\n        }\r\n\r\n        let lastSolidLayer = this.layers.length - 1;\r\n        const emergingLayerAlpha = computeLastLayerAlpha(this.layers.length, this.layers[this.layers.length - 1].birthTimestamp);\r\n        if (emergingLayerAlpha < 1) {\r\n            lastSolidLayer--;\r\n        }\r\n        const emergingLayer = lastSolidLayer + 1;\r\n\r\n        plotter.initialize(backgroundColor, this.cumulatedZoom, scaling);\r\n\r\n        plotter.drawPolygons(this.layers[lastSolidLayer].primitives, 1);\r\n        if (emergingLayer < this.layers.length) {\r\n            plotter.drawPolygons(this.layers[emergingLayer].primitives, emergingLayerAlpha);\r\n        }\r\n\r\n        if (linesColor) {\r\n            for (let iLayer = 0; iLayer < this.layers.length; iLayer++) {\r\n                const thickness = SimulationMonothreaded.getLineThicknessForLayer(iLayer, this.layers.length);\r\n                const alpha = (iLayer === emergingLayer) ? emergingLayerAlpha : 1;\r\n                plotter.drawLines(this.layers[iLayer].outlines, thickness, linesColor, alpha);\r\n            }\r\n        }\r\n\r\n        plotter.finalize();\r\n    }\r\n\r\n    public downloadAsSvg(width: number, height: number, scaling: number, backgroundColor: Color, linesColor?: Color): void {\r\n        const svgPlotter = new PlotterSVG(width, height);\r\n        this.draw(svgPlotter, scaling, backgroundColor, linesColor);\r\n        const svgString = svgPlotter.output();\r\n        downloadSvgOutput(svgString);\r\n    }\r\n\r\n    protected onNewMetrics(newMetrics: IEngineMetrics): void {\r\n        updateEngineMetricsIndicators(newMetrics);\r\n    }\r\n\r\n    private static getLineThicknessForLayer(layerId: number, totalLayersCount: number): number {\r\n        let variablePart = 0;\r\n        if (layerId > 0) {\r\n            variablePart = Parameters.thickness * (totalLayersCount - 1 - layerId) / (totalLayersCount - 1);\r\n        }\r\n        return 1 + variablePart;\r\n    }\r\n}\r\n\r\nexport {\r\n    SimulationMonothreaded,\r\n};\r\n\r\n","import { Color } from \"../misc/color\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Throttle } from \"../misc/throttle\";\r\nimport { downloadSvgOutput } from \"../misc/web\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { IVboBuffer, IVboPart, PlotterWebGLBasic } from \"../plotter/plotter-webgl-basic\";\r\nimport { EPrimitiveType } from \"../primitives/primitive-type-enum\";\r\nimport { IEngineMetrics, updateEngineMetricsIndicators } from \"./engine-metrics\";\r\nimport { computeLastLayerAlpha, ISimulation } from \"./simulation\";\r\nimport * as MessagesFromWorker from \"./worker/messages/from-worker/messages\";\r\nimport * as MessagesToWorker from \"./worker/messages/to-worker/messages\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\ntype PendingResetCommand = {\r\n    viewport: Rectangle;\r\n    primitiveType: EPrimitiveType;\r\n};\r\n\r\ntype PendingRecomputeColorsCommand = {\r\n    colorVariation: number;\r\n};\r\n\r\ntype PendingPerformUpdateCommand = {\r\n    viewport: Rectangle;\r\n    wantedDepth: number;\r\n    subdivisionBalance: number;\r\n    colorVariation: number;\r\n};\r\n\r\nclass SimulationMultithreaded implements ISimulation<PlotterWebGLBasic> {\r\n    public static readonly isSupported: boolean = (typeof Worker !== \"undefined\");\r\n\r\n    private readonly worker: Worker;\r\n\r\n    private polygonsVboBuffer: IVboBuffer;\r\n    private linesVboBuffer: IVboBuffer;\r\n    private hasSomethingNewToDraw: boolean = true;\r\n\r\n    private cumulatedZoom: Zoom = Zoom.noZoom();\r\n\r\n    private lastCommandSendingTimestamp: number = 0;\r\n    private isAwaitingCommandResult: boolean = false;\r\n\r\n    private pendingResetCommand: PendingResetCommand | null = null;\r\n    private pendingRecomputeColorsCommand: PendingRecomputeColorsCommand | null = null;\r\n    private pendingPerformUpdateCommand: PendingPerformUpdateCommand | null = null;\r\n    private readonly performUpdateCommandThrottle: Throttle = new Throttle(100);\r\n\r\n    private lastLayerBirthTimestamp: number = 0;\r\n    private layersCount: number = 0;\r\n\r\n    public constructor() {\r\n        this.worker = new Worker(`script/worker.js?v=${Page.version}`);\r\n\r\n        MessagesFromWorker.NewMetrics.addListener(this.worker, (engineMetrics: IEngineMetrics) => {\r\n            updateEngineMetricsIndicators(engineMetrics);\r\n        });\r\n\r\n        MessagesFromWorker.DownloadAsSvgOutput.addListener(this.worker, (output: string) => {\r\n            downloadSvgOutput(output);\r\n        });\r\n\r\n        MessagesFromWorker.ResetOutput.addListener(this.worker, (polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer) => {\r\n            this.cumulatedZoom = Zoom.noZoom();\r\n            this.polygonsVboBuffer = polygonsVboBuffer;\r\n            this.linesVboBuffer = linesVboBuffer;\r\n            this.lastLayerBirthTimestamp = performance.now();\r\n            this.layersCount = linesVboBuffer.bufferParts.length;\r\n            this.hasSomethingNewToDraw = true;\r\n\r\n            this.logCommandOutput(\"Reset\");\r\n            this.isAwaitingCommandResult = false;\r\n        });\r\n\r\n        MessagesFromWorker.RecomputeColorsOutput.addListener(this.worker, (polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer) => {\r\n            this.polygonsVboBuffer = polygonsVboBuffer;\r\n            this.linesVboBuffer = linesVboBuffer;\r\n            this.hasSomethingNewToDraw = true;\r\n\r\n            this.logCommandOutput(\"Recompute colors\");\r\n            this.isAwaitingCommandResult = false;\r\n        });\r\n\r\n        MessagesFromWorker.PerformUpdateOutput.addListener(this.worker, (polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer, appliedZoom: Zoom, newlayerAppeared: boolean) => {\r\n            const invAppliedZoom = appliedZoom.inverse();\r\n            this.cumulatedZoom = Zoom.multiply(this.cumulatedZoom, invAppliedZoom); // keep the advance we had on the worker\r\n            this.polygonsVboBuffer = polygonsVboBuffer;\r\n            this.linesVboBuffer = linesVboBuffer;\r\n            if (newlayerAppeared) {\r\n                this.lastLayerBirthTimestamp = performance.now();\r\n            }\r\n            this.layersCount = linesVboBuffer.bufferParts.length;\r\n            this.hasSomethingNewToDraw = true;\r\n\r\n            this.logCommandOutput(\"Perform update\");\r\n            this.isAwaitingCommandResult = false;\r\n        });\r\n\r\n        MessagesFromWorker.PerformUpdateNoOutput.addListener(this.worker, (appliedZoom: Zoom) => {\r\n            const invAppliedZoom = appliedZoom.inverse();\r\n            this.cumulatedZoom = Zoom.multiply(this.cumulatedZoom, invAppliedZoom); // keep the advance we had on the worker\r\n            this.hasSomethingNewToDraw = true;\r\n\r\n            this.logCommandOutput(\"Perform update (no output)\");\r\n            this.isAwaitingCommandResult = false;\r\n        });\r\n    }\r\n\r\n    public update(viewport: Rectangle, instantZoom: Zoom, wantedDepth: number, subdivisionBalance: number, colorVariation: number): boolean {\r\n        this.cumulatedZoom = Zoom.multiply(instantZoom, this.cumulatedZoom);\r\n\r\n        this.pendingPerformUpdateCommand = {\r\n            viewport,\r\n            wantedDepth,\r\n            subdivisionBalance,\r\n            colorVariation,\r\n        };\r\n        this.sendNextCommand();\r\n\r\n        return this.hasSomethingNewToDraw;\r\n    }\r\n\r\n    public draw(plotter: PlotterWebGLBasic, scaling: number, backgroundColor: Color, linesColor?: Color): void {\r\n        this.hasSomethingNewToDraw = false;\r\n\r\n        plotter.initialize(backgroundColor, this.cumulatedZoom, scaling);\r\n\r\n        const emergingLayerAlpha = computeLastLayerAlpha(this.layersCount, this.lastLayerBirthTimestamp);\r\n\r\n        if (this.polygonsVboBuffer) {\r\n            let needToReupload = false;\r\n            const registerPolygonBufferPart = (bufferPart: IVboPart, index: number, array: IVboPart[]) => {\r\n                const isLastLayer = (index === array.length - 1);\r\n                if (emergingLayerAlpha >= 1 && !isLastLayer) {\r\n                    // if the last layer is opaque, no need to draw the previous ones\r\n                    return;\r\n                }\r\n\r\n                const alpha = isLastLayer ? emergingLayerAlpha : 1;\r\n                if (!plotter.registerPolygonsVboPartForDrawing(bufferPart.geometryId, alpha)) {\r\n                    needToReupload = true;\r\n                }\r\n            };\r\n\r\n            this.polygonsVboBuffer.bufferParts.forEach(registerPolygonBufferPart);\r\n            if (needToReupload) {\r\n                plotter.uploadPolygonsVbo(this.polygonsVboBuffer);\r\n                this.polygonsVboBuffer.bufferParts.forEach(registerPolygonBufferPart);\r\n            }\r\n        }\r\n\r\n        if (this.linesVboBuffer && linesColor) {\r\n            let needToReupload = false;\r\n            const registerLinesBufferPart = (bufferPart: IVboPart, index: number, array: IVboPart[]) => {\r\n                const isLastLayer = (index === array.length - 1);\r\n                const alpha = isLastLayer ? emergingLayerAlpha : 1;\r\n                if (!plotter.registerLinesVboPartForDrawing(bufferPart.geometryId, linesColor, alpha)) {\r\n                    needToReupload = true;\r\n                }\r\n            };\r\n\r\n            this.linesVboBuffer.bufferParts.forEach(registerLinesBufferPart);\r\n            if (needToReupload) {\r\n                plotter.uploadLinesVbo(this.linesVboBuffer);\r\n                this.linesVboBuffer.bufferParts.forEach(registerLinesBufferPart);\r\n            }\r\n        }\r\n\r\n        plotter.finalize();\r\n    }\r\n\r\n    public reset(viewport: Rectangle, primitiveType: EPrimitiveType): void {\r\n        this.pendingResetCommand = {\r\n            viewport,\r\n            primitiveType\r\n        };\r\n        this.sendNextCommand();\r\n    }\r\n\r\n    public recomputeColors(colorVariation: number): void {\r\n        this.pendingRecomputeColorsCommand = {\r\n            colorVariation,\r\n        };\r\n\r\n        this.sendNextCommand();\r\n    }\r\n\r\n    public downloadAsSvg(width: number, height: number, scaling: number, backgroundColor: Color, linesColor?: Color): void {\r\n        MessagesToWorker.DownloadAsSvg.sendMessage(this.worker, width, height, scaling, backgroundColor, linesColor);\r\n    }\r\n\r\n    private sendNextCommand(): void {\r\n        if (!this.isAwaitingCommandResult) {\r\n            if (this.pendingResetCommand) {\r\n                const command = this.pendingResetCommand;\r\n                this.pendingRecomputeColorsCommand = null;\r\n                this.pendingPerformUpdateCommand = null;\r\n                this.pendingResetCommand = null;\r\n\r\n                // console.log(\"Sending reset command\");\r\n                this.lastCommandSendingTimestamp = performance.now();\r\n                this.isAwaitingCommandResult = true;\r\n                MessagesToWorker.Reset.sendMessage(this.worker, command.viewport, command.primitiveType);\r\n            } else if (this.pendingRecomputeColorsCommand) {\r\n                const command = this.pendingRecomputeColorsCommand;\r\n                this.pendingRecomputeColorsCommand = null;\r\n\r\n                // console.log(\"Sending recompute colors command\");\r\n                this.lastCommandSendingTimestamp = performance.now();\r\n                this.isAwaitingCommandResult = true;\r\n                MessagesToWorker.RecomputeColors.sendMessage(this.worker, command.colorVariation);\r\n            } else if (this.pendingPerformUpdateCommand) {\r\n                this.performUpdateCommandThrottle.runIfAvailable(() => {\r\n                    const command = this.pendingPerformUpdateCommand;\r\n                    this.pendingPerformUpdateCommand = null;\r\n\r\n                    // console.log(\"Sending update command\");\r\n                    this.lastCommandSendingTimestamp = performance.now();\r\n                    this.isAwaitingCommandResult = true;\r\n                    MessagesToWorker.PerformUpdate.sendMessage(this.worker, this.cumulatedZoom, command.viewport, command.wantedDepth, command.subdivisionBalance, command.colorVariation);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private logCommandOutput(commandName: string): void {\r\n        const commandDuration = performance.now() - this.lastCommandSendingTimestamp;\r\n        if (commandDuration > 50) {\r\n            console.log(`\"${commandName}\" command took ${commandDuration.toFixed(0)} ms.`);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    SimulationMultithreaded,\r\n};\r\n\r\n","import { Color } from \"../misc/color\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { EPrimitiveType } from \"../primitives/primitive-type-enum\";\r\n\r\n\r\ninterface ISimulation<TPlotter> {\r\n    update(viewport: Rectangle, instantZoom: Zoom, wantedDepth: number, subdivisionBalance: number, colorVariation: number): boolean;\r\n    draw(plotter: TPlotter, scaling: number, backgroundColor: Color, linesColor?: Color): void;\r\n    reset(viewport: Rectangle, primitiveType: EPrimitiveType): void;\r\n    recomputeColors(colorVariation: number): void;\r\n    downloadAsSvg(width: number, height: number, scaling: number, backgroundColor: Color, linesColor?: Color): void;\r\n}\r\n\r\nfunction computeLastLayerAlpha(layersCount: number, lastLayerBirthTimestamp: number): number {\r\n    if (Parameters.blending && layersCount > 1) {\r\n        if (Parameters.zoomingSpeed > 0) {\r\n            const emergingTimeOfLastLayer = 1000 / Math.pow((1 + Parameters.zoomingSpeed), 2);\r\n            const ageOfLastLayer = performance.now() - lastLayerBirthTimestamp;\r\n            if (ageOfLastLayer < emergingTimeOfLastLayer) {\r\n                // last layer is still blending in\r\n                return ageOfLastLayer / emergingTimeOfLastLayer;\r\n            }\r\n        }\r\n    }\r\n    return 1;\r\n}\r\n\r\nexport {\r\n    computeLastLayerAlpha,\r\n    ISimulation,\r\n};\r\n","class TreeNode {\r\n    private readonly children: TreeNode[] = [];\r\n\r\n    private subDepthsCache: TreeNode[][] = [];\r\n    private parent: TreeNode = null;\r\n\r\n    public treeDepth(): number {\r\n        if (this.children.length > 0) {\r\n            return this.children[0].treeDepth() + 1;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    public getDirectChildren(): TreeNode[] {\r\n        return this.getChildrenOfDepth(1);\r\n    }\r\n\r\n    public getChildrenOfDepth(depth: number): TreeNode[] {\r\n        if (depth < 0) {\r\n            return [];\r\n        }\r\n\r\n        if (typeof this.subDepthsCache[depth] !== \"undefined\") {\r\n            return this.subDepthsCache[depth];\r\n        }\r\n\r\n        // no cache => build it\r\n        let result: TreeNode[];\r\n        if (depth === 0) {\r\n            result = [this];\r\n        } else {\r\n            result = [];\r\n            for (const child of this.children) {\r\n                const subchildren = child.getChildrenOfDepth(depth - 1);\r\n                if (subchildren.length > 0) {\r\n                    result = result.concat(subchildren);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.subDepthsCache[depth] = result;\r\n        return result;\r\n    }\r\n\r\n    public removeChild(child: TreeNode): void {\r\n        for (let iC = this.children.length - 1; iC >= 0; iC--) {\r\n            if (this.children[iC] === child) {\r\n                this.children[iC].parent = null;\r\n                this.children.splice(iC, 1);\r\n                this.onSubtreeChange(1);\r\n                return;\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Cannot remove an unknown child.\");\r\n    }\r\n\r\n    protected addChildren(...newChildren: TreeNode[]): void {\r\n        if (newChildren.length > 0) {\r\n            for (const newChild of newChildren) {\r\n                if (newChild.parent) {\r\n                    throw new Error(\"Cannot attach a tree node that already has a parent.\");\r\n                }\r\n                newChild.parent = this;\r\n            }\r\n            Array.prototype.push.apply(this.children, newChildren);\r\n            this.onSubtreeChange(1);\r\n        }\r\n    }\r\n\r\n    protected removeChildren(): void {\r\n        for (const child of this.children) {\r\n            child.parent = null;\r\n        }\r\n\r\n        this.children.length = 0;\r\n        this.onSubtreeChange(1);\r\n    }\r\n\r\n    public onSubtreeChange(invalidatedLevel: number): void {\r\n        // remove all caches for levels lower or equal than the one that changed\r\n        if (this.subDepthsCache.length >= invalidatedLevel + 1) {\r\n            this.subDepthsCache.length = invalidatedLevel;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.onSubtreeChange(invalidatedLevel + 1);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    TreeNode,\r\n};\r\n","import { addListenerToWorker, EVerb, sendMessageFromWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.DOWNLOAD_AS_SVG_OUTPUT;\r\n\r\ninterface IMessageData {\r\n    readonly output: string;\r\n}\r\n\r\nfunction sendMessage(output: string): void {\r\n    const messageData: IMessageData = {\r\n        output,\r\n    };\r\n\r\n    sendMessageFromWorker(verb, messageData);\r\n}\r\n\r\nfunction addListener(worker: Worker, listener: (output: string) => unknown): void {\r\n    addListenerToWorker(worker, verb, (data: IMessageData) => {\r\n        listener(data.output);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import * as DownloadAsSvgOutput from \"./download-as-svg-output\";\r\nimport * as NewMetrics from \"./new-metrics\";\r\nimport * as PerformUpdateNoOutput from \"./perform-update-no-output\";\r\nimport * as PerformUpdateOutput from \"./perform-update-output\";\r\nimport * as RecomputeColorsOutput from \"./recompute-colors-output\";\r\nimport * as ResetOutput from \"./reset-output\";\r\n\r\n\r\nexport {\r\n    PerformUpdateNoOutput,\r\n    PerformUpdateOutput,\r\n    NewMetrics,\r\n    DownloadAsSvgOutput,\r\n    RecomputeColorsOutput,\r\n    ResetOutput,\r\n};\r\n\r\n","import { IEngineMetrics } from \"../../../engine-metrics\";\r\nimport { addListenerToWorker, EVerb, sendMessageFromWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.NEW_METRICS;\r\n\r\ninterface IMessageData {\r\n    readonly engineMetrics: IEngineMetrics;\r\n}\r\n\r\nfunction sendMessage(engineMetrics: IEngineMetrics): void {\r\n    const messageData: IMessageData = {\r\n        engineMetrics,\r\n    };\r\n\r\n    sendMessageFromWorker(verb, messageData);\r\n}\r\n\r\nfunction addListener(worker: Worker, listener: (engineMetrics: IEngineMetrics) => unknown): void {\r\n    addListenerToWorker(worker, verb, (data: IMessageData) => {\r\n        listener(data.engineMetrics);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n","import { Zoom } from \"../../../../misc/zoom\";\r\nimport { addListenerToWorker, EVerb, sendMessageFromWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.PERFORM_UPDATE_NO_OUTPUT;\r\n\r\ninterface IMessageData {\r\n    readonly appliedZoom: Zoom;\r\n}\r\n\r\nfunction sendMessage(appliedZoom: Zoom): void {\r\n    const messageData: IMessageData = {\r\n        appliedZoom,\r\n    };\r\n    sendMessageFromWorker(verb, messageData);\r\n}\r\n\r\nfunction addListener(worker: Worker, listener: (appliedZoom: Zoom) => unknown): void {\r\n    addListenerToWorker(worker, verb, (data: IMessageData) => {\r\n        const appliedZoom = Zoom.rehydrate(data.appliedZoom);\r\n        listener(appliedZoom);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import { Zoom } from \"../../../../misc/zoom\";\r\nimport { IVboBuffer } from \"../../../../plotter/plotter-webgl-basic\";\r\nimport { rehydrateVboBuffer } from \"../../../../plotter/vbo-types\";\r\nimport { addListenerToWorker, EVerb, sendMessageFromWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.PERFORM_UPDATE_OUTPUT;\r\n\r\ninterface IMessageData {\r\n    readonly polygonsVboBuffer: IVboBuffer;\r\n    readonly linesVboBuffer: IVboBuffer;\r\n    readonly appliedZoom: Zoom;\r\n    readonly newLayerAppeared: boolean;\r\n}\r\n\r\nfunction sendMessage(polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer, appliedZoom: Zoom, newLayerAppeared: boolean): void {\r\n    const messageData: IMessageData = {\r\n        polygonsVboBuffer,\r\n        linesVboBuffer,\r\n        appliedZoom,\r\n        newLayerAppeared,\r\n    };\r\n\r\n    const transfer: ArrayBuffer[] = [\r\n        polygonsVboBuffer.buffer.buffer,\r\n        linesVboBuffer.buffer.buffer,\r\n    ];\r\n    sendMessageFromWorker(verb, messageData, transfer);\r\n}\r\n\r\nfunction addListener(worker: Worker, listener: (polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer, appliedZoom: Zoom, newLayerAppeared: boolean) => unknown): void {\r\n    addListenerToWorker(worker, verb, (data: IMessageData) => {\r\n        const polygonsVboBuffer = rehydrateVboBuffer(data.polygonsVboBuffer);\r\n        const linesVboBuffer = rehydrateVboBuffer(data.linesVboBuffer);\r\n        const appliedZoom = Zoom.rehydrate(data.appliedZoom);\r\n        listener(polygonsVboBuffer, linesVboBuffer, appliedZoom, data.newLayerAppeared);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import { IVboBuffer } from \"../../../../plotter/plotter-webgl-basic\";\r\nimport { rehydrateVboBuffer } from \"../../../../plotter/vbo-types\";\r\nimport { addListenerToWorker, EVerb, sendMessageFromWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.RECOMPUTE_COLORS_OUTPUT;\r\n\r\ninterface IMessageData {\r\n    readonly polygonsVboBuffer: IVboBuffer;\r\n    readonly linesVboBuffer: IVboBuffer;\r\n}\r\n\r\nfunction sendMessage(polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer): void {\r\n    const messageData: IMessageData = {\r\n        polygonsVboBuffer,\r\n        linesVboBuffer,\r\n    };\r\n\r\n    const transfer: ArrayBuffer[] = [\r\n        polygonsVboBuffer.buffer.buffer,\r\n        linesVboBuffer.buffer.buffer,\r\n    ];\r\n    sendMessageFromWorker(verb, messageData, transfer);\r\n}\r\n\r\nfunction addListener(worker: Worker, listener: (polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer) => unknown): void {\r\n    addListenerToWorker(worker, verb, (data: IMessageData) => {\r\n        const polygonsVboBuffer = rehydrateVboBuffer(data.polygonsVboBuffer);\r\n        const linesVboBuffer = rehydrateVboBuffer(data.linesVboBuffer);\r\n        listener(polygonsVboBuffer, linesVboBuffer);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import { IVboBuffer } from \"../../../../plotter/plotter-webgl-basic\";\r\nimport { rehydrateVboBuffer } from \"../../../../plotter/vbo-types\";\r\nimport { addListenerToWorker, EVerb, sendMessageFromWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.RESET_OUTPUT;\r\n\r\ninterface IMessageData {\r\n    readonly polygonsVboBuffer: IVboBuffer;\r\n    readonly linesVboBuffer: IVboBuffer;\r\n}\r\n\r\nfunction sendMessage(polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer): void {\r\n    const messageData: IMessageData = {\r\n        polygonsVboBuffer,\r\n        linesVboBuffer,\r\n    };\r\n\r\n    const transfer: ArrayBuffer[] = [\r\n        polygonsVboBuffer.buffer.buffer,\r\n        linesVboBuffer.buffer.buffer,\r\n    ];\r\n    sendMessageFromWorker(verb, messageData, transfer);\r\n}\r\n\r\nfunction addListener(worker: Worker, listener: (polygonsVboBuffer: IVboBuffer, linesVboBuffer: IVboBuffer) => unknown): void {\r\n    addListenerToWorker(worker, verb, (data: IMessageData) => {\r\n        const polygonsVboBuffer = rehydrateVboBuffer(data.polygonsVboBuffer);\r\n        const linesVboBuffer = rehydrateVboBuffer(data.linesVboBuffer);\r\n        listener(polygonsVboBuffer, linesVboBuffer);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","enum EVerb {\r\n    RESET = \"reset\",\r\n    RESET_OUTPUT = \"reset-output\",\r\n    RECOMPUTE_COLORS = \"recopute-colors\",\r\n    RECOMPUTE_COLORS_OUTPUT = \"recompute-colors-output\",\r\n    DOWNLOAD_AS_SVG = \"download-svg\",\r\n    DOWNLOAD_AS_SVG_OUTPUT = \"download-as-svg-output\",\r\n    PERFORM_UPDATE = \"perform-update\",\r\n    PERFORM_UPDATE_OUTPUT = \"perform-update-output\",\r\n    PERFORM_UPDATE_NO_OUTPUT = \"perform-update-no-output\",\r\n    NEW_METRICS = \"new-metrics\",\r\n}\r\n\r\ninterface IMessageData<TData> {\r\n    verb: EVerb;\r\n    data: TData;\r\n}\r\n\r\nfunction sendMessage<TData>(target: any, verb: EVerb, data: TData, transfer?: Transferable[]): void {\r\n    const messageData: IMessageData<TData> = {\r\n        verb,\r\n        data,\r\n    };\r\n    target.postMessage(messageData, transfer);\r\n}\r\n\r\nfunction addListener<TData>(context: any, verb: EVerb, callback: (data: TData) => unknown): void {\r\n    context.addEventListener(\"message\", (event: MessageEvent) => {\r\n        if (event && event.data.verb === verb) {\r\n            callback(event.data.data);\r\n        }\r\n    });\r\n}\r\n\r\nconst nowAttributeName = \"performanceNow\";\r\nlet emulatePerformanceNow = false;\r\nif (typeof self.performance === \"undefined\" || typeof self.performance.now !== \"function\") {\r\n    console.log(\"Worker doesn't support performance.now()... Emulating it.\"); // IE11\r\n    emulatePerformanceNow = true;\r\n    (self as any).performance = {\r\n        now: () => 0,\r\n    };\r\n}\r\n\r\nfunction sendMessageToWorker<TData>(worker: Worker, verb: EVerb, data: TData): void {\r\n    if (emulatePerformanceNow) {\r\n        (data as any)[nowAttributeName] = performance.now(); // send to the worker the now() of the main thread\r\n    }\r\n    sendMessage<TData>(worker, verb, data);\r\n}\r\nfunction addListenerToWorker<TData>(worker: Worker, verb: EVerb, callback: (data: TData) => unknown): void {\r\n    addListener<TData>(worker, verb, callback);\r\n}\r\n\r\nfunction sendMessageFromWorker<TData>(verb: EVerb, data: TData, transfer?: Transferable[]): void {\r\n    sendMessage<TData>(self, verb, data, transfer);\r\n}\r\nfunction addListenerFromWorker<TData>(verb: EVerb, callback: (data: TData) => unknown): void {\r\n    if (emulatePerformanceNow) {\r\n        const callbackWrapper = (data: TData) => {\r\n            const performanceNow = (data as any)[nowAttributeName]; // read from the worker the now() sent by the main thread\r\n            (self as any).performance.now = () => performanceNow;\r\n            callback(data);\r\n        };\r\n        addListener<TData>(self as any, verb, callbackWrapper);\r\n    } else {\r\n        addListener<TData>(self as any, verb, callback);\r\n    }\r\n}\r\n\r\nexport {\r\n    addListenerFromWorker,\r\n    addListenerToWorker,\r\n    EVerb,\r\n    sendMessageFromWorker,\r\n    sendMessageToWorker,\r\n};\r\n\r\n","import { Color } from \"../../../../misc/color\";\r\nimport { addListenerFromWorker, EVerb, sendMessageToWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.DOWNLOAD_AS_SVG;\r\n\r\ninterface IMessageData {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly scaling: number;\r\n    readonly backgroundColor: Color;\r\n    readonly linesColor?: Color;\r\n}\r\n\r\nfunction sendMessage(worker: Worker, width: number, height: number, scaling: number, backgroundColor: Color, linesColor?: Color): void {\r\n    const messageData: IMessageData = {\r\n        width,\r\n        height,\r\n        scaling,\r\n        backgroundColor,\r\n        linesColor,\r\n    };\r\n\r\n    sendMessageToWorker(worker, verb, messageData);\r\n}\r\n\r\nfunction addListener(listener: (width: number, height: number, scaling: number, backgroundColor: Color, linesColor?: Color) => unknown): void {\r\n    addListenerFromWorker(verb, (data: IMessageData) => {\r\n        const backgroundColor = Color.rehydrate(data.backgroundColor);\r\n        let linesColor;\r\n        if (data.linesColor) {\r\n            linesColor = Color.rehydrate(data.linesColor);\r\n        }\r\n        listener(data.width, data.height,  data.scaling, backgroundColor, linesColor);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import * as DownloadAsSvg from \"./download-as-svg-message\";\r\nimport * as PerformUpdate from \"./perform-update-message\";\r\nimport * as RecomputeColors from \"./recompute-color-message\";\r\nimport * as Reset from \"./reset-message\";\r\n\r\n\r\nexport {\r\n    DownloadAsSvg,\r\n    RecomputeColors,\r\n    Reset,\r\n    PerformUpdate,\r\n};\r\n\r\n","import { Rectangle } from \"../../../../misc/rectangle\";\r\nimport { Zoom } from \"../../../../misc/zoom\";\r\nimport { addListenerFromWorker, EVerb, sendMessageToWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.PERFORM_UPDATE;\r\n\r\ninterface IMessageData {\r\n    readonly zoomToApply: Zoom;\r\n    readonly viewport: Rectangle;\r\n    readonly wantedDepth: number;\r\n    readonly subdivisionBalance: number;\r\n    readonly colorVariation: number;\r\n}\r\n\r\nfunction sendMessage(worker: Worker, zoomToApply: Zoom, viewport: Rectangle, wantedDepth: number, subdivisionBalance: number, colorVariation: number): void {\r\n    const messageData: IMessageData = {\r\n        zoomToApply,\r\n        viewport,\r\n        wantedDepth,\r\n        subdivisionBalance,\r\n        colorVariation,\r\n    };\r\n\r\n    sendMessageToWorker(worker, verb, messageData);\r\n}\r\n\r\nfunction addListener(listener: (zoomToApply: Zoom, viewport: Rectangle, wantedDepth: number, subdivisionBalance: number, colorVariation: number) => unknown): void {\r\n    addListenerFromWorker(verb, (data: IMessageData) => {\r\n        const viewport = Rectangle.rehydrate(data.viewport);\r\n        const zoomToApply = Zoom.rehydrate(data.zoomToApply);\r\n\r\n        listener(zoomToApply, viewport, data.wantedDepth, data.subdivisionBalance, data.colorVariation);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import { addListenerFromWorker, EVerb, sendMessageToWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.RECOMPUTE_COLORS;\r\n\r\ninterface IMessageData  {\r\n    readonly colorVariation: number;\r\n}\r\n\r\nfunction sendMessage(worker: Worker, colorVariation: number): void {\r\n    const messageData: IMessageData = {\r\n        colorVariation,\r\n    };\r\n\r\n   sendMessageToWorker(worker, verb, messageData);\r\n}\r\n\r\nfunction addListener(listener: (colorVariation: number) => unknown): void {\r\n    addListenerFromWorker(verb, (data: IMessageData) => {\r\n        listener(data.colorVariation);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import { Rectangle } from \"../../../../misc/rectangle\";\r\nimport { EPrimitiveType } from \"../../../../primitives/primitive-type-enum\";\r\nimport { addListenerFromWorker, EVerb, sendMessageToWorker } from \"../message\";\r\n\r\n\r\nconst verb = EVerb.RESET;\r\n\r\ninterface IMessageData {\r\n    readonly viewport: Rectangle;\r\n    readonly primitiveType: EPrimitiveType;\r\n}\r\n\r\nfunction sendMessage(worker: Worker, viewport: Rectangle, primitiveType: EPrimitiveType): void {\r\n    const messageData: IMessageData = {\r\n        viewport,\r\n        primitiveType,\r\n    };\r\n\r\n    sendMessageToWorker(worker, verb, messageData);\r\n}\r\n\r\nfunction addListener(listener: (viewport: Rectangle, primitiveType: EPrimitiveType) => unknown): void {\r\n    addListenerFromWorker(verb, (data: IMessageData) => {\r\n        const viewport = Rectangle.rehydrate(data.viewport);\r\n        listener(viewport, data.primitiveType);\r\n    });\r\n}\r\n\r\nexport {\r\n    addListener,\r\n    sendMessage,\r\n};\r\n\r\n","import { SimulationMonothreaded } from \"./engine/simulation-monothreaded\";\r\nimport { SimulationMultithreaded } from \"./engine/simulation-multithreaded\";\r\nimport { ISimulation } from \"./engine/simulation\";\r\nimport { Color } from \"./misc/color\";\r\nimport { FrametimeMonitor } from \"./misc/frame-time-monitor\";\r\nimport { IPoint } from \"./misc/point\";\r\nimport { registerPolyfills } from \"./misc/polyfills\";\r\nimport { Zoom } from \"./misc/zoom\";\r\nimport { EPlotter, Parameters } from \"./parameters\";\r\nimport { PlotterCanvas } from \"./plotter/plotter-canvas\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterWebGL } from \"./plotter/plotter-webgl\";\r\nimport { PlotterWebGLBasic } from \"./plotter/plotter-webgl-basic\";\r\nimport * as Testing from \"./testing/main-testing\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\nfunction main<TPlotter extends PlotterCanvas>(simulation: ISimulation<TPlotter>, plotter: TPlotter): void {\r\n    const backgroundColor = Color.BLACK;\r\n\r\n    function linesColor(): Color | undefined {\r\n        if (Parameters.displayLines) {\r\n            return Parameters.linesColor;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    Parameters.recomputeColorsObservers.push(() => {\r\n        simulation.recomputeColors(Parameters.colorVariation);\r\n    });\r\n\r\n    Parameters.downloadObservers.push(() => {\r\n        simulation.downloadAsSvg(plotter.width, plotter.height, Parameters.scaling, backgroundColor, linesColor());\r\n    });\r\n\r\n    function getCurrentMousePosition(): IPoint {\r\n        const mousePosition = Parameters.mousePositionInPixels;\r\n        mousePosition.x -= 0.5 * plotter.width;\r\n        mousePosition.y -= 0.5 * plotter.height;\r\n        return mousePosition;\r\n    }\r\n    let lastZoomCenter: IPoint;\r\n    function buildInstantZoom(dt: number): Zoom {\r\n        if (Page.Canvas.isMouseDown()) {\r\n            lastZoomCenter = getCurrentMousePosition();\r\n        }\r\n        return Zoom.buildZoom(lastZoomCenter, 1 + dt * Parameters.zoomingSpeed);\r\n    }\r\n\r\n    function reset(): void {\r\n        plotter.resizeCanvas();\r\n        simulation.reset(plotter.viewport, Parameters.primitiveType);\r\n        lastZoomCenter = { x: 0, y: 0 };\r\n    }\r\n    Parameters.resetObservers.push(reset);\r\n    reset();\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => { needToRedraw = true; });\r\n\r\n    const frametimeMonitor = new FrametimeMonitor();\r\n    setInterval(() => {\r\n        frametimeMonitor.updateIndicators();\r\n    }, 1000);\r\n\r\n    const MAX_DT = 1 / 30;\r\n    let lastFrameTimestamp = performance.now();\r\n    function mainLoop(): void {\r\n        const now = performance.now();\r\n        const millisecondsSinceLastFrame = now - lastFrameTimestamp;\r\n        lastFrameTimestamp = now;\r\n        frametimeMonitor.registerFrameTime(millisecondsSinceLastFrame);\r\n\r\n        // A high dt means a low FPS because of too many computations,\r\n        // however the higher the dt, the more computation will be needed... Clamp it.\r\n        const dt = Math.min(MAX_DT, 0.001 * millisecondsSinceLastFrame);\r\n        const instantZoom = buildInstantZoom(dt);\r\n\r\n        const updatedChangedSomething = simulation.update(plotter.viewport, instantZoom, Parameters.depth, Parameters.balance, Parameters.colorVariation);\r\n        if (updatedChangedSomething || instantZoom.isNotNull()) {\r\n            needToRedraw = true;\r\n        }\r\n\r\n        if (needToRedraw && plotter.isReady) {\r\n            plotter.resizeCanvas();\r\n            simulation.draw(plotter, Parameters.scaling, backgroundColor, linesColor());\r\n            needToRedraw = false;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    mainLoop();\r\n}\r\n\r\nregisterPolyfills();\r\n\r\nif (Parameters.debugMode) {\r\n    Testing.main();\r\n} else {\r\n    if (Parameters.multithreaded) {\r\n        if (!SimulationMultithreaded.isSupported) {\r\n            Page.Demopage.setErrorMessage(\"worker-not-supported\", \"Your browser does not the multithreaded mode because it does not support Web Workers.\");\r\n        }\r\n\r\n        const simulation = new SimulationMultithreaded();\r\n        const plotter = new PlotterWebGLBasic();\r\n        main<typeof plotter>(simulation, plotter);\r\n    } else {\r\n        const simulation = new SimulationMonothreaded();\r\n        if (Parameters.plotter === EPlotter.CANVAS2D) {\r\n            const plotter = new PlotterCanvas2D();\r\n            main<typeof plotter>(simulation, plotter);\r\n        } else {\r\n            const plotter = new PlotterWebGL();\r\n            main<typeof plotter>(simulation, plotter);\r\n        }\r\n    }\r\n\r\n    Page.Canvas.setIndicatorText(\"multithreaded\", Parameters.multithreaded ? \"yes\" : \"no\");\r\n}\r\n","import { IPoint } from \"./point\";\r\n\r\n\r\nfunction areSameSign(a: number, b: number, c: number): boolean {\r\n    return a * b >= 0 && a * c >= 0;\r\n}\r\n\r\nfunction getSide(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n    return (p3.x - p1.x) * -(p2.y - p1.y) + (p3.y - p1.y) * (p2.x - p1.x);\r\n}\r\n\r\nfunction interpolate(a: number, b: number, x: number): number {\r\n    return (1 - x) * a + x * b;\r\n}\r\n\r\nfunction interpolatePoint(p1: IPoint, p2: IPoint, x: number): IPoint {\r\n    return {\r\n        x: interpolate(p1.x, p2.x, x),\r\n        y: interpolate(p1.y, p2.y, x),\r\n    };\r\n}\r\n\r\nfunction random(from: number, to: number): number {\r\n    return from + (to - from) * Math.random();\r\n}\r\n\r\n\r\nfunction squaredDistance(p1: IPoint, p2: IPoint): number {\r\n    const dx = p1.x - p2.x;\r\n    const dy = p1.y - p2.y;\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\nexport {\r\n    areSameSign,\r\n    getSide,\r\n    interpolatePoint,\r\n    random,\r\n    squaredDistance,\r\n};\r\n","class Color {\r\n    public static readonly BLACK: Color = new Color(0, 0, 0);\r\n    public static readonly WHITE: Color = new Color(255, 255, 255);\r\n    public static readonly RED: Color = new Color(255, 0, 0);\r\n    public static readonly GREEN: Color = new Color(0, 255, 0);\r\n\r\n    public static random(): Color {\r\n        return new Color(Color.randomChannel(), Color.randomChannel(), Color.randomChannel());\r\n    }\r\n\r\n    public static rehydrate(dehydrated: Color): Color {\r\n        return new Color(dehydrated.r, dehydrated.g, dehydrated.b);\r\n    }\r\n\r\n    /** @param r in [0, 255]\r\n     *  @param g in [0, 255]\r\n     *  @param b in [0, 255]\r\n     */\r\n    public constructor(public r: number, public g: number, public b: number) { }\r\n\r\n    public toHexaString(): string {\r\n        if (!this.hexString) {\r\n            const rHex = this.r.toString(16).padStart(2, \"0\");\r\n            const gHex = this.g.toString(16).padStart(2, \"0\");\r\n            const bHex = this.b.toString(16).padStart(2, \"0\");\r\n            this.hexString = `#${rHex}${gHex}${bHex}`;\r\n        }\r\n\r\n        return this.hexString;\r\n    }\r\n\r\n    public toRgbaString(alpha: number): string {\r\n        return `rgba(${this.r}, ${this.g}, ${this.b}, ${alpha})`;\r\n    }\r\n\r\n    public computeCloseColor(colorVariation: number): Color {\r\n        return new Color(\r\n            Color.computeCloseChannelValue(this.r, colorVariation),\r\n            Color.computeCloseChannelValue(this.g, colorVariation),\r\n            Color.computeCloseChannelValue(this.b, colorVariation),\r\n        );\r\n    }\r\n\r\n    public get luminosity(): number {\r\n        return (0.299 * this.r + 0.587 * this.g + 0.114 * this.b) / 255;\r\n    }\r\n\r\n    private static randomChannel(): number {\r\n        return Math.floor(256 * Math.random());\r\n    }\r\n\r\n    private static computeCloseChannelValue(referenceValue: number, variation: number): number {\r\n        const raw = referenceValue + Math.round(variation * (Math.random() - 0.5));\r\n        if (raw < 0) {\r\n            return 0;\r\n        } else if (raw > 255) {\r\n            return 255;\r\n        }\r\n        return raw;\r\n    }\r\n\r\n    private hexString: string;\r\n}\r\n\r\nexport { Color };\r\n","import \"../page-interface-generated\";\r\n\r\n\r\nclass FrametimeMonitor {\r\n    private lastIndicatorsUpdateTimestamp: number;\r\n\r\n    private nbFrameSinceLastIndicatorsUpdate: number;\r\n    private maxFrametime: number;\r\n\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    private reset(): void {\r\n        this.nbFrameSinceLastIndicatorsUpdate = 0;\r\n        this.lastIndicatorsUpdateTimestamp = performance.now();\r\n    }\r\n\r\n    public registerFrameTime(frametime: number): void {\r\n        if (this.nbFrameSinceLastIndicatorsUpdate === 0) {\r\n            this.maxFrametime = frametime;\r\n        } else if (frametime > this.maxFrametime) {\r\n            this.maxFrametime = frametime;\r\n        }\r\n\r\n        this.nbFrameSinceLastIndicatorsUpdate++;\r\n    }\r\n\r\n    public updateIndicators(): void {\r\n        const now = performance.now();\r\n        const timespanSinceLastUpdate = now - this.lastIndicatorsUpdateTimestamp;\r\n        this.lastIndicatorsUpdateTimestamp = now;\r\n\r\n        if (this.nbFrameSinceLastIndicatorsUpdate > 0) {\r\n            const averageFrametime = timespanSinceLastUpdate / this.nbFrameSinceLastIndicatorsUpdate;\r\n\r\n            Page.Canvas.setIndicatorText(\"average-frame-time\", FrametimeMonitor.frametimeToString(averageFrametime));\r\n            Page.Canvas.setIndicatorText(\"max-frame-time\",  FrametimeMonitor.frametimeToString(this.maxFrametime));\r\n\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    private static frametimeToString(frametime: number): string {\r\n        const shortenedFrametime = frametime.toFixed(0);\r\n        const shortenedFps = (1000 / frametime).toFixed(0);\r\n\r\n        return `${shortenedFrametime} ms (${shortenedFps} fps)`;\r\n    }\r\n}\r\n\r\nexport {\r\n    FrametimeMonitor,\r\n};\r\n","import \"../page-interface-generated\";\r\n\r\n\r\nconst loadingObjects: { [id: string]: boolean } = {};\r\n\r\nfunction registerLoadingObject(id: string): void {\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(true);\r\n    }\r\n    loadingObjects[id] = false;\r\n}\r\n\r\nfunction registerLoadedObject(id: string): void {\r\n    delete loadingObjects[id];\r\n\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(false);\r\n    }\r\n}\r\n\r\nexport {\r\n    registerLoadedObject,\r\n    registerLoadingObject,\r\n};\r\n\r\n","function registerPadStartPolyfill(): void {\r\n    if (typeof String.prototype.padStart !== \"function\") {\r\n        String.prototype.padStart = function padStart(maxLength: number, fillString?: string): string {\r\n            if (this.length > maxLength) {\r\n                return String(this);\r\n            }\r\n\r\n            if (!fillString) {\r\n                fillString = \" \";\r\n            }\r\n\r\n            const nbRepeats = Math.ceil((maxLength - this.length) / fillString.length);\r\n            let result = \"\";\r\n            for (let i = 0; i < nbRepeats; i++) {\r\n                result += fillString;\r\n            }\r\n            return result + this;\r\n        };\r\n    }\r\n}\r\n\r\nfunction registerArrayFindPolyfill(): void {\r\n    if (typeof Array.prototype.find !== \"function\") {\r\n        Array.prototype.find = function find<T>(this: T[], predicate: (this: void, value: T, index: number, array: T[]) => boolean): T | null {\r\n            for (let i = 0; i < this.length; i++) {\r\n                if (predicate(this[i], i, this)) {\r\n                    return this[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n    }\r\n}\r\n\r\nfunction registerPolyfills(): void {\r\n    registerPadStartPolyfill();\r\n    registerArrayFindPolyfill();\r\n}\r\n\r\nexport {\r\n    registerPolyfills,\r\n};\r\n\r\n","import { IPoint } from \"./point\";\r\nimport { Zoom } from \"./zoom\";\r\n\r\n\r\nclass Rectangle {\r\n    public static rehydrate(dehydrated: Rectangle): Rectangle {\r\n        return new Rectangle(dehydrated.topLeft.x, dehydrated.bottomRight.x, dehydrated.topLeft.y, dehydrated.bottomRight.y);\r\n    }\r\n\r\n    public readonly topLeft: IPoint;\r\n    public readonly bottomRight: IPoint;\r\n\r\n    public constructor(left: number, right: number, top: number, bottom: number) {\r\n        this.topLeft = { x: left, y: top };\r\n        this.bottomRight = { x: right, y: bottom };\r\n    }\r\n\r\n    public containsPoint(point: IPoint): boolean {\r\n        return (point.x >= this.topLeft.x && point.x <= this.bottomRight.x) &&\r\n            (point.y >= this.topLeft.y && point.y <= this.bottomRight.y);\r\n    }\r\n\r\n    public lineIntersectsBoundaries(p1: IPoint, p2: IPoint): boolean {\r\n        // Let's define a boundary by the segment between points D1 and D2\r\n        // we will try to find lambdaP and lambdaD in [0, 1] such as\r\n        // P1 + lambdaP * (P2 - P1) = D1 + lambdaD * (D2 - D1)\r\n\r\n        const vPx = p2.x - p1.x;\r\n        const vPy = p2.y - p1.y;\r\n\r\n        const width = this.width;\r\n        const height = this.height;\r\n        if (vPx !== 0) { // line is not vertical, so test the vertical boundaries\r\n            { // left boundary\r\n\r\n                const lambdaP = (this.left - p1.x) / vPx;\r\n                if (lambdaP >= 0 && lambdaP <= 1) {\r\n                    const lambdaD = (p1.y + lambdaP * vPy - this.top) / height;\r\n                    if (lambdaD >= 0 && lambdaD <= 1) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            { // right boundary\r\n\r\n                const lambdaP = (this.right - p1.x) / vPx;\r\n                if (lambdaP >= 0 && lambdaP <= 1) {\r\n                    const lambdaD = (p1.y + lambdaP * vPy - this.top) / height;\r\n                    if (lambdaD >= 0 && lambdaD <= 1) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (vPy !== 0) { // line is not horizontal, so test the horizontal boundaries\r\n            { // top boundary\r\n                const lambdaP = (this.top - p1.y) / vPy;\r\n                if (lambdaP >= 0 && lambdaP <= 1) {\r\n                    const lambdaD = (p1.x + lambdaP * vPx - this.left) / width;\r\n                    if (lambdaD >= 0 && lambdaD <= 1) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            { // bototm boundary\r\n                const lambdaP = (this.bottom - p1.y) / vPy;\r\n                if (lambdaP >= 0 && lambdaP <= 1) {\r\n                    const lambdaD = (p1.x + lambdaP * vPx - this.left) / width;\r\n                    if (lambdaD >= 0 && lambdaD <= 1) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public computeNewRectangleAfterZoom(zoom: Zoom): Rectangle {\r\n        const inverseZoom = zoom.inverse();\r\n        const topLeftAfterZoom: IPoint = {\r\n            x: this.topLeft.x,\r\n            y: this.topLeft.y,\r\n        };\r\n        inverseZoom.applyToPoint(topLeftAfterZoom);\r\n        const bottomRightAfterZoom: IPoint = {\r\n            x: this.bottomRight.x,\r\n            y: this.bottomRight.y,\r\n        };\r\n        inverseZoom.applyToPoint(bottomRightAfterZoom);\r\n        return new Rectangle(topLeftAfterZoom.x, bottomRightAfterZoom.x, topLeftAfterZoom.y, bottomRightAfterZoom.y);\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.bottomRight.x - this.topLeft.x;\r\n    }\r\n    public get height(): number {\r\n        return this.bottomRight.y - this.topLeft.y;\r\n    }\r\n\r\n    public get left(): number {\r\n        return this.topLeft.x;\r\n    }\r\n    public get right(): number {\r\n        return this.bottomRight.x;\r\n    }\r\n    public get top(): number {\r\n        return this.topLeft.y;\r\n    }\r\n    public get bottom(): number {\r\n        return this.bottomRight.y;\r\n    }\r\n}\r\n\r\nexport { Rectangle };\r\n","class Throttle {\r\n    private lastRunTimestamp: number;\r\n\r\n    public constructor(private readonly minimumDistanceBetweenRuns: number) {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.lastRunTimestamp = performance.now();\r\n    }\r\n\r\n    public runIfAvailable(operation: () => unknown): void {\r\n        const now = performance.now();\r\n        if (now - this.lastRunTimestamp > this.minimumDistanceBetweenRuns) {\r\n            operation();\r\n            this.lastRunTimestamp = now;\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Throttle,\r\n};\r\n","function downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nfunction downloadSvgOutput(output: string): void {\r\n    downloadTextFile(\"tessellation.svg\", output);\r\n}\r\n\r\nfunction getQueryStringValue(name: string): string | null {\r\n    if (typeof URLSearchParams !== \"undefined\") {\r\n        const params = new URLSearchParams(window.location.search);\r\n        return params.get(name);\r\n    }\r\n\r\n    if (window.location.search.length > 0) { // IE11\r\n        const search = window.location.search.slice(1); // remove leading \"?\"\r\n        const words = search.split(\"&\");\r\n        for (const word of words) {\r\n            const wantedPrefix = `${name}=`;\r\n            if (word.indexOf(wantedPrefix) === 0) {\r\n                const rawValue = word.substring(wantedPrefix.length);\r\n                return decodeURIComponent(rawValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction setQueryStringValue(name: string, value: string | null): void {\r\n    if (typeof URLSearchParams !== \"undefined\") {\r\n        const params = new URLSearchParams(window.location.search);\r\n        if (value === null) {\r\n            params.delete(name);\r\n        } else {\r\n            params.set(name, value);\r\n        }\r\n        window.location.search = params.toString();\r\n    } else { // IE11\r\n        const paramsArray = window.location.search.split(\"&\");\r\n        const paramToAdd = `${name}=${encodeURIComponent(value)}`;\r\n        let paramAlreadyExists = false;\r\n        for (let i = 0; i < paramsArray.length; i++) {\r\n            if (paramsArray[i].indexOf(name + \"=\") === 0) {\r\n                paramsArray[i] = paramToAdd;\r\n                paramAlreadyExists = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!paramAlreadyExists) {\r\n            paramsArray.push(paramToAdd);\r\n        }\r\n        window.location.search = paramsArray.join(\"&\");\r\n    }\r\n}\r\n\r\nexport {\r\n    downloadSvgOutput,\r\n    getQueryStringValue,\r\n    setQueryStringValue,\r\n};\r\n","import { IPoint } from \"./point\";\r\n\r\nclass Zoom {\r\n    public static noZoom(): Zoom {\r\n        return new Zoom(1, 0, 0);\r\n    }\r\n\r\n    public static rehydrate(dehydrated: Zoom): Zoom {\r\n        return new Zoom(dehydrated.a, dehydrated.b, dehydrated.c);\r\n    }\r\n\r\n    public static multiply(z1: Zoom, z2: Zoom): Zoom {\r\n        /* Multiply the two matrices OTHER x THIS\r\n                        | a2 0  b2 |\r\n                        | 0  a2 c2 |\r\n                        | 0  0  1  |\r\n            | a1 0  b1 |\r\n            | 0  a1 c1 |\r\n            | 0  0  1  |\r\n         */\r\n        return new Zoom(\r\n            z1.a * z2.a,\r\n            z1.a * z2.b + z1.b,\r\n            z1.a * z2.c + z1.c\r\n        );\r\n    }\r\n\r\n    public static buildZoom(center: IPoint, scaling: number): Zoom {\r\n        return new Zoom(scaling, center.x * (1 - scaling), center.y * (1 - scaling));\r\n    }\r\n\r\n    /* The 2D zoom is stored as a 3x3 matrix in the form\r\n     * | a 0 b |\r\n     * | 0 a c |\r\n     * | 0 0 1 |\r\n     */\r\n    private constructor(\r\n        private readonly a: number,\r\n        private readonly b: number,\r\n        private readonly c: number) {\r\n    }\r\n\r\n    public isNotNull(): boolean {\r\n        const isIdentity = (this.a === 1) && (this.b === 0) && (this.c === 0);\r\n        return !isIdentity;\r\n    }\r\n\r\n    public applyToPoint(point: IPoint): void {\r\n        point.x = this.a * point.x + this.b;\r\n        point.y = this.a * point.y + this.c;\r\n    }\r\n\r\n    public copy(): Zoom {\r\n        return new Zoom(this.a, this.b, this.c);\r\n    }\r\n\r\n    public inverse(): Zoom {\r\n        /* compute invert matrix of\r\n            | a 0 b |\r\n            | 0 a c |\r\n            | 0 0 1 |\r\n        */\r\n        return new Zoom(\r\n            1 / this.a, // if a=0, then the current zoom is not inversible anyways so do not protect this\r\n            -this.b / this.a,\r\n            -this.c / this.a\r\n        );\r\n    }\r\n\r\n    public get scale(): number {\r\n        return this.a;\r\n    }\r\n\r\n    public get translate(): IPoint {\r\n        return { x: this.b, y: this.c };\r\n    }\r\n}\r\n\r\nexport {\r\n    Zoom,\r\n};\r\n","/* tslint:disable */\ndeclare namespace Page.Demopage {\r\n    function setErrorMessage(id: string, message: string): void;\r\n    function removeErrorMessage(id: string): void;\r\n}\r\n\ndeclare namespace Page.Helpers {\r\n    namespace URL {\r\n        function loopOnParameters(prefix: string, callback: (name: string, value: string) => unknown): void;\r\n        function setQueryParameter(prefix: string, name: string, value: string): void;\r\n        function removeQueryParameter(prefix: string, name: string): void;\r\n    }\r\n    namespace Events {\r\n        function callAfterDOMLoaded(callback: () => unknown): void;\r\n    }\r\n}\r\n\ndeclare namespace Page.Controls {\r\n    function setVisibility(id: string, visible: boolean): void;\r\n}\r\ndeclare namespace Page.Sections {\r\n    function setVisibility(id: string, visible: boolean): void;\r\n}\r\n\n\r\ndeclare namespace Page.Tabs {\r\n    type TabsObserver = (selectedValues: string[]) => unknown;\r\n    /**\r\n     * @return {boolean} Whether or not the observer was added\r\n     */\r\n    function addObserver(tabsId: string, observer: TabsObserver): boolean;\r\n    function getValues(tabsId: string): string[];\r\n    function setValues(tabsId: string, values: string[], updateURLStorage?: boolean): void;\r\n    function storeState(tabsId: string): void;\r\n    function clearStoredState(tabsIdd: string): void;\r\n}\r\n\n\r\ndeclare namespace Page.Range {\r\n    type RangeObserver = (rangeValue: number) => unknown;\r\n    /**\r\n     * Callback will be called every time the value changes.\r\n     * @return {boolean} Whether or not the observer was added\r\n     */\r\n    function addObserver(rangeId: string, observer: RangeObserver): boolean;\r\n    /**\r\n     * Callback will be called only when the value stops changing.\r\n     * @return {boolean} Whether or not the observer was added\r\n     */\r\n    function addLazyObserver(rangeId: string, observer: RangeObserver): boolean;\r\n    function getValue(rangeId: string): number | null;\r\n    function setValue(rangeId: string, value: number): void;\r\n    function storeState(rangeId: string): void;\r\n    function clearStoredState(rangeId: string): void;\r\n}\r\n\n\r\ndeclare namespace Page.Checkbox {\r\n    type CheckboxObserver = (isChecked: boolean) => unknown;\r\n    /**\r\n     * @return {boolean} Whether or not the observer was added\r\n     */\r\n    function addObserver(checkboxId: string, observer: CheckboxObserver): boolean;\r\n    function setChecked(checkboxId: string, value: boolean): void;\r\n    function isChecked(checkboxId: string): boolean;\r\n    function storeState(checkboxId: string): void;\r\n    function clearStoredState(checkboxId: string): void;\r\n}\r\n\ndeclare namespace Page.Button {\r\n    type ButtonObserver = () => unknown;\r\n    /**\r\n     * @return {boolean} Whether or not the observer was added\r\n     */\r\n    function addObserver(buttonId: string, observer: ButtonObserver): boolean;\r\n    function setLabel(buttonId: string, label: string): void;\r\n}\r\n\n\r\ndeclare namespace Page.ColorPicker {\r\n    namespace ColorSpace {\r\n        interface IRGB {\r\n            r: number;\r\n            g: number;\r\n            b: number;\r\n        }\r\n        interface IHSV {\r\n            h: number;\r\n            s: number;\r\n            v: number;\r\n        }\r\n        type Hexa = string;\r\n        function parseHexa(value: string): Hexa | null;\r\n        function hsvToRgb(hsv: IHSV): IRGB;\r\n        function rgbToHsv(rgb: IRGB): IHSV;\r\n        function rgbToHex(rgb: IRGB): Hexa;\r\n        function hexToRgb(hex: Hexa): IRGB;\r\n    }\r\n    export type OnChangeObserver = (newValue: ColorSpace.IRGB) => unknown;\r\n    export function addObserver(id: string, observer: OnChangeObserver): boolean;\r\n    export function getValue(id: string): ColorSpace.IRGB;\r\n    export function getValueHex(id: string): ColorSpace.Hexa;\r\n    /**\r\n     * @param id control id\r\n     * @param r integer in [0, 255]\r\n     * @param g integer in [0, 255]\r\n     * @param b integer in [0, 255]\r\n     */\r\n    export function setValue(id: string, r: number, g: number, b: number): void;\r\n    export function storeState(id: string): void;\r\n    export function clearStoredState(id: string): void;\r\n    export {};\r\n}\r\n\ndeclare namespace Page.FileControl {\r\n    type FileDownloadObserver = () => unknown;\r\n    type FileUploadObserver = (files: FileList) => unknown;\r\n    /**\r\n     * @return {boolean} Whether or not the observer was added\r\n     */\r\n    function addDownloadObserver(id: string, observer: FileDownloadObserver): boolean;\r\n    /**\r\n     * @return {boolean} Whether or not the observer was added\r\n     */\r\n    function addUploadObserver(uploadId: string, observer: FileUploadObserver): boolean;\r\n    function clearFileUpload(id: string): void;\r\n}\r\n\ndeclare namespace Page {\r\n    const version: string;\r\n}\r\n\n\r\ndeclare namespace Page.Canvas {\r\n    type CanvasResizeObserver = (newWidth: number, newHeight: number) => unknown;\r\n    type FullscreenObserver = (isFullscreen: boolean) => unknown;\r\n    type MouseDownObserver = () => unknown;\r\n    type MouseUpObserver = () => unknown;\r\n    type MouseDragObserver = (deltaX: number, deltaY: number) => unknown;\r\n    type MouseMoveObserver = (newX: number, newY: number) => unknown;\r\n    type MouseEnterObserver = () => unknown;\r\n    type MouseLeaveObserver = () => unknown;\r\n    type MouseWheelObserver = (delta: number, mousePosition: number[]) => unknown;\r\n    export const Observers: Readonly<{\r\n        canvasResize: CanvasResizeObserver[];\r\n        fullscreenToggle: FullscreenObserver[];\r\n        mouseDown: MouseDownObserver[];\r\n        mouseDrag: MouseDragObserver[];\r\n        mouseEnter: MouseEnterObserver[];\r\n        mouseLeave: MouseLeaveObserver[];\r\n        mouseMove: MouseMoveObserver[];\r\n        mouseWheel: MouseWheelObserver[];\r\n        mouseUp: MouseUpObserver[];\r\n    }>;\r\n    export function getAspectRatio(): number;\r\n    export function getCanvas(): HTMLCanvasElement | null;\r\n    export function getCanvasContainer(): HTMLElement | null;\r\n    export function getSize(): number[];\r\n    export function getMousePosition(): number[];\r\n    export function isFullScreen(): boolean;\r\n    export function isMouseDown(): boolean;\r\n    export function setIndicatorText(id: string, text: string): void;\r\n    export function setIndicatorVisibility(id: string, visible: boolean): void;\r\n    export function setIndicatorsVisibility(visible: boolean): void;\r\n    export function setMaxSize(newMaxWidth: number, newMaxHeight: number): void;\r\n    export function setResizable(resizable: boolean): void;\r\n    export function setLoaderText(text: string): void;\r\n    export function showLoader(show: boolean): void;\r\n    export function toggleFullscreen(fullscreen: boolean): void;\r\n    export {};\r\n}\r\n\n","import { Color } from \"./misc/color\";\r\nimport { IPoint } from \"./misc/point\";\r\nimport { getQueryStringValue, setQueryStringValue } from \"./misc/web\";\r\nimport { EPrimitiveType } from \"./primitives/primitive-type-enum\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRIMITIVE_TABS_ID: \"primitive-tabs-id\",\r\n    DENSITY_RANGE_ID: \"density-range-id\",\r\n    BALANCE_RANGE_ID: \"balance-range-id\",\r\n    ZOOMING_SPEED_RANGE_ID: \"zooming-speed-range-id\",\r\n    MULTITHREADED_CHECKBOX_ID: \"multithreaded-checkbox-id\",\r\n    RESET_BUTTON_ID: \"reset-button-id\",\r\n\r\n    PLOTTER_TABS_ID: \"plotter-tabs-id\",\r\n    SCALING_RANGE_ID: \"scaling-range-id\",\r\n    COLOR_VARIATION_RANGE_ID: \"color-variation-range-id\",\r\n    BLENDING_CHECKBOX_ID: \"blending-checkbox-id\",\r\n    SHOW_INDICATORS_CHECKBOX_ID: \"show-indicators-checkbox-id\",\r\n\r\n    DISPLAY_LINES_CHECKBOX_ID: \"display-lines-checkbox-id\",\r\n    THICKNESS_RANGE_ID: \"thickness-range-id\",\r\n    LINES_COLOR_PICKER_ID: \"lines-color-picker-id\",\r\n\r\n    DOWNLOAD_BUTTON: \"result-download-id\",\r\n};\r\n\r\nenum EPlotter {\r\n    WEBGL = \"webgl\",\r\n    CANVAS2D = \"canvas2d\",\r\n}\r\n\r\nconst plotterQueryStringParamName = \"plotter\";\r\nconst monothreadedQueryStringParamName = \"monothreaded\";\r\n\r\ntype Observer = () => unknown;\r\n\r\nfunction isMonothreaded(): boolean {\r\n    return getQueryStringValue(monothreadedQueryStringParamName) === \"1\";\r\n}\r\n\r\nfunction getPlotter(): EPlotter {\r\n    if (isMonothreaded()) {\r\n        if (getQueryStringValue(plotterQueryStringParamName) === EPlotter.CANVAS2D) {\r\n            return EPlotter.CANVAS2D;\r\n        } else {\r\n            return EPlotter.WEBGL;\r\n        }\r\n    } else {\r\n        return EPlotter.WEBGL;\r\n    }\r\n}\r\n\r\nabstract class Parameters {\r\n    public static readonly resetObservers: Observer[] = [];\r\n    public static readonly recomputeColorsObservers: Observer[] = [];\r\n    public static readonly redrawObservers: Observer[] = [];\r\n    public static readonly downloadObservers: Observer[] = [];\r\n\r\n    public static readonly debugMode: boolean = (getQueryStringValue(\"debug\") === \"1\");\r\n    public static readonly multithreaded: boolean = !isMonothreaded();\r\n    public static readonly plotter: EPlotter = getPlotter();\r\n\r\n    public static get primitiveType(): EPrimitiveType {\r\n        return Page.Tabs.getValues(controlId.PRIMITIVE_TABS_ID)[0] as EPrimitiveType;\r\n    }\r\n\r\n    public static get depth(): number {\r\n        return Page.Range.getValue(controlId.DENSITY_RANGE_ID);\r\n    }\r\n\r\n    public static get balance(): number {\r\n        return Page.Range.getValue(controlId.BALANCE_RANGE_ID);\r\n    }\r\n\r\n    public static get zoomingSpeed(): number {\r\n        return Page.Range.getValue(controlId.ZOOMING_SPEED_RANGE_ID);\r\n    }\r\n\r\n    public static get scaling(): number {\r\n        return Page.Range.getValue(controlId.SCALING_RANGE_ID);\r\n    }\r\n\r\n    public static get colorVariation(): number {\r\n        return 255 * Page.Range.getValue(controlId.COLOR_VARIATION_RANGE_ID);\r\n    }\r\n\r\n    public static get blending(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.BLENDING_CHECKBOX_ID);\r\n    }\r\n\r\n    public static get displayLines(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.DISPLAY_LINES_CHECKBOX_ID);\r\n    }\r\n\r\n    public static get isThicknessEnabled(): boolean {\r\n        return Parameters.plotter === EPlotter.CANVAS2D;\r\n    }\r\n    public static get thickness(): number {\r\n        if (Parameters.isThicknessEnabled) {\r\n            return Page.Range.getValue(controlId.THICKNESS_RANGE_ID);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public static get linesColor(): Color {\r\n        const color = Page.ColorPicker.getValue(controlId.LINES_COLOR_PICKER_ID);\r\n        return new Color(color.r, color.g, color.b);\r\n    }\r\n\r\n    public static get mousePositionInPixels(): IPoint {\r\n        const canvasSize = Page.Canvas.getSize();\r\n        const mousePosition = Page.Canvas.getMousePosition();\r\n        return {\r\n            x: window.devicePixelRatio * canvasSize[0] * mousePosition[0],\r\n            y: window.devicePixelRatio * canvasSize[1] * mousePosition[1],\r\n        };\r\n    }\r\n}\r\n\r\nfunction callObservers(observers: Observer[]): void {\r\n    for (const observer of observers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst callRedraw = () => { callObservers(Parameters.redrawObservers); };\r\nconst callReset = () => {\r\n    callObservers(Parameters.resetObservers);\r\n    callRedraw();\r\n};\r\n\r\nPage.Range.addObserver(controlId.BALANCE_RANGE_ID, callReset);\r\nPage.Button.addObserver(controlId.RESET_BUTTON_ID, callReset);\r\nPage.Canvas.Observers.canvasResize.push(callReset);\r\nPage.Tabs.addObserver(controlId.PRIMITIVE_TABS_ID, callReset);\r\n\r\nPage.Range.addObserver(controlId.COLOR_VARIATION_RANGE_ID, () => {\r\n    callObservers(Parameters.recomputeColorsObservers);\r\n    callRedraw();\r\n});\r\n\r\nPage.Range.addObserver(controlId.SCALING_RANGE_ID, callRedraw);\r\nPage.Checkbox.addObserver(controlId.DISPLAY_LINES_CHECKBOX_ID, callRedraw);\r\nPage.Canvas.Observers.canvasResize.push(callRedraw);\r\nPage.Range.addObserver(controlId.THICKNESS_RANGE_ID, callRedraw);\r\nPage.ColorPicker.addObserver(controlId.LINES_COLOR_PICKER_ID, callRedraw);\r\n\r\nPage.FileControl.addDownloadObserver(controlId.DOWNLOAD_BUTTON, () => { callObservers(Parameters.downloadObservers); });\r\n\r\nPage.Controls.setVisibility(controlId.THICKNESS_RANGE_ID, Parameters.isThicknessEnabled);\r\n\r\nfunction updateIndicatorsVisibility(): void {\r\n    Page.Canvas.setIndicatorsVisibility(Page.Checkbox.isChecked(controlId.SHOW_INDICATORS_CHECKBOX_ID));\r\n}\r\nPage.Checkbox.addObserver(controlId.SHOW_INDICATORS_CHECKBOX_ID, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nPage.Tabs.setValues(controlId.PLOTTER_TABS_ID, [Parameters.plotter]);\r\nPage.Tabs.addObserver(controlId.PLOTTER_TABS_ID, (values: string[]) => {\r\n    const wantedPlotter = (values[0] === EPlotter.CANVAS2D) ? EPlotter.CANVAS2D : EPlotter.WEBGL;\r\n    Page.Tabs.clearStoredState(controlId.PLOTTER_TABS_ID);\r\n    setQueryStringValue(plotterQueryStringParamName, wantedPlotter);\r\n});\r\n\r\nPage.Checkbox.setChecked(controlId.MULTITHREADED_CHECKBOX_ID, Parameters.multithreaded);\r\nPage.Checkbox.addObserver(controlId.MULTITHREADED_CHECKBOX_ID, (checked: boolean) => {\r\n    Page.Checkbox.clearStoredState(controlId.MULTITHREADED_CHECKBOX_ID);\r\n    setQueryStringValue(monothreadedQueryStringParamName, checked ? null : \"1\");\r\n});\r\nPage.Controls.setVisibility(controlId.PLOTTER_TABS_ID, !Parameters.multithreaded);\r\n\r\nexport {\r\n    EPlotter,\r\n    Parameters,\r\n};\r\n\r\n","let nextFreeId = 0;\r\n\r\nclass GeometryId {\r\n    public static new(): GeometryId {\r\n        return new GeometryId(nextFreeId++, 0);\r\n    }\r\n\r\n    public static rehydrate(dehydrated: GeometryId): GeometryId {\r\n        return new GeometryId(dehydrated.id, dehydrated.version);\r\n    }\r\n\r\n    public copy(): GeometryId {\r\n        return new GeometryId(this.id, this.version);\r\n    }\r\n\r\n    public isSameAs(other: GeometryId): boolean {\r\n        return other !== null && this.id === other.id && this.version === other.version;\r\n    }\r\n\r\n    public registerChange(): void {\r\n        this.version++;\r\n    }\r\n\r\n    private constructor(\r\n        public readonly id: number,\r\n        private version: number\r\n    ) { }\r\n}\r\n\r\nexport {\r\n    GeometryId,\r\n};\r\n","import \"../../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\(([^)]*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","import \"../../page-interface-generated\";\r\n\r\n\r\ntype LoadCallback = (success: boolean) => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        let url = \"./shaders/\" + filename;\r\n        if (typeof Page.version !== \"undefined\") {\r\n            url += `?v=${Page.version}`;\r\n        }\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                console.log(source);\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","class Viewport {\r\n    public static setFullCanvas(gl: WebGLRenderingContext): void {\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n    }\r\n\r\n    public lower: number;\r\n    public left: number;\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor(left: number, lower: number, width: number, height: number) {\r\n        this.left = left;\r\n        this.lower = lower;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    public set(gl: WebGLRenderingContext): void {\r\n        gl.viewport(this.lower, this.left, this.width, this.height);\r\n    }\r\n}\r\n\r\nexport { Viewport };\r\n","import { Color } from \"../misc/color\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { PlotterCanvas } from \"./plotter-canvas\";\r\nimport { IPlotter } from \"./plotter-interface\";\r\nimport { BatchOfLines, BatchOfPolygons } from \"./types\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nclass PlotterCanvas2D extends PlotterCanvas implements IPlotter {\r\n    private readonly context: CanvasRenderingContext2D;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color, zoom: Zoom, scaling: number): void {\r\n        // reset all transforms\r\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n        // clear canvas\r\n        this.context.fillStyle = backgroundColor.toHexaString();\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // apply scaling\r\n        this.context.translate(+0.5 * this.width, +0.5 * this.height);\r\n        this.context.scale(scaling, scaling);\r\n        this.context.translate(-0.5 * this.width, -0.5 * this.height);\r\n\r\n        // apply zoom\r\n        const zoomTranslate = zoom.translate;\r\n        this.context.translate(zoomTranslate.x, zoomTranslate.y);\r\n\r\n        const zoomScale = zoom.scale;\r\n        this.context.translate(+0.5 * this.width, +0.5 * this.height);\r\n        this.context.scale(zoomScale, zoomScale);\r\n        this.context.translate(-0.5 * this.width, -0.5 * this.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawLines(batchOfLines: BatchOfLines, thickness: number, color: Color, alpha: number): void {\r\n        if (alpha > 0 && batchOfLines) {\r\n            this.context.fillStyle = \"none\";\r\n            this.context.strokeStyle = (alpha >= 1) ? color.toHexaString() : color.toRgbaString(alpha);\r\n\r\n            const halfWidth = 0.5 * this.width;\r\n            const halfHeight = 0.5 * this.height;\r\n            for (const line of batchOfLines.items) {\r\n                this.context.lineWidth = thickness * this.cssPixel;\r\n\r\n                this.context.beginPath();\r\n                if (line.length >= 2) {\r\n                    this.context.moveTo(line[0].x + halfWidth, line[0].y + halfHeight);\r\n\r\n                    for (let iP = 1; iP < line.length; iP++) {\r\n                        this.context.lineTo(line[iP].x + halfWidth, line[iP].y + halfHeight);\r\n                    }\r\n                }\r\n                this.context.stroke();\r\n                this.context.closePath();\r\n            }\r\n        }\r\n    }\r\n\r\n    public drawPolygons(batchOfPolygons: BatchOfPolygons, alpha: number): void {\r\n        if (alpha > 0 && batchOfPolygons) {\r\n            this.context.strokeStyle = \"none\";\r\n\r\n            const halfWidth = 0.5 * this.width;\r\n            const halfHeight = 0.5 * this.height;\r\n            for (const polygon of batchOfPolygons.items) {\r\n                if (polygon.vertices.length >= 3) {\r\n                    this.context.fillStyle = (alpha >= 1) ? polygon.color.toHexaString() : polygon.color.toRgbaString(alpha);\r\n\r\n                    this.context.beginPath();\r\n                    this.context.moveTo(polygon.vertices[0].x + halfWidth, polygon.vertices[0].y + halfHeight);\r\n                    for (let iP = 1; iP < polygon.vertices.length; iP++) {\r\n                        this.context.lineTo(polygon.vertices[iP].x + halfWidth, polygon.vertices[iP].y + halfHeight);\r\n                    }\r\n                    this.context.closePath();\r\n                    this.context.fill();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvas2D,\r\n};\r\n\r\n","import { Rectangle } from \"../misc/rectangle\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nabstract class PlotterCanvas {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    protected readonly cssPixel: number;\r\n\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    protected constructor() {\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n        this.resizeCanvas();\r\n    }\r\n\r\n    public abstract get isReady(): boolean;\r\n\r\n    public get viewport(): Rectangle {\r\n        return new Rectangle(-0.5 * this._width, 0.5 * this._width, -0.5 * this._height, 0.5 * this._height);\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    public resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n\r\n        this._width = this.canvas.width;\r\n        this._height = this.canvas.height;\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterCanvas,\r\n};\r\n\r\n","import { Color } from \"../misc/color\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { IPlotter } from \"./plotter-interface\";\r\nimport { BatchOfLines, BatchOfPolygons } from \"./types\";\r\n\r\n\r\nclass PlotterSVG implements IPlotter {\r\n    private lines: string[] = [];\r\n\r\n    public constructor(\r\n        private readonly width: number,\r\n        private readonly height: number) {\r\n    }\r\n\r\n    public initialize(backgroundColor: Color, zoom: Zoom, scaling: number): void {\r\n        this.lines = [];\r\n\r\n        this.lines.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>`);\r\n        this.lines.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${this.width} ${this.height}\">`);\r\n        this.lines.push(`<rect fill=\"${backgroundColor.toHexaString()}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${this.width}\" height=\"${this.height}\"/>`);\r\n        this.lines.push(`\\t<g transform=\"scale(${scaling})\" transform-origin=\"${0.5 * this.width} ${0.5 * this.height}\">`);\r\n\r\n        const zoomTranslate = zoom.translate;\r\n        this.lines.push(`\\t\\t<g transform=\"translate(${zoomTranslate.x}, ${zoomTranslate.y})\">`);\r\n        this.lines.push(`\\t\\t\\t<g transform=\"scale(${zoom.scale})\" transform-origin=\"${0.5 * this.width} ${0.5 * this.height}\">`);\r\n    }\r\n\r\n    public finalize(): void {\r\n        this.lines.push(`\\t\\t\\t</g>`);\r\n        this.lines.push(`\\t\\t</g>`);\r\n        this.lines.push(`\\t</g>`);\r\n        this.lines.push(`</svg>`);\r\n    }\r\n\r\n    public drawLines(batchOfLines: BatchOfLines, thickness: number, color: Color, alpha: number): void {\r\n        if (alpha > 0 && batchOfLines) {\r\n            this.lines.push(`\\t\\t\\t\\t<g stroke=\"${color.toHexaString()}\" fill=\"none\" opacity=\"${alpha}\">`);\r\n\r\n            const halfWidth = 0.5 * this.width;\r\n            const halfHeight = 0.5 * this.height;\r\n            for (const line of batchOfLines.items) {\r\n                const path: string[] = [];\r\n\r\n                if (line.length >= 2) {\r\n                    path.push(`M${line[0].x + halfWidth} ${line[0].y + halfHeight}`);\r\n\r\n                    for (let iP = 1; iP < line.length; iP++) {\r\n                        path.push(`L${line[iP].x + halfWidth} ${line[iP].y + halfHeight}`);\r\n                    }\r\n                }\r\n\r\n                if (path.length > 0) {\r\n                    this.lines.push(`\\t\\t\\t\\t\\t<path stroke-width=\"${thickness}\" d=\"${path.join()}\"/>`);\r\n                }\r\n            }\r\n            this.lines.push(`\\t\\t\\t\\t</g>`);\r\n        }\r\n    }\r\n\r\n    public drawPolygons(batchOfPolygons: BatchOfPolygons, alpha: number): void {\r\n        if (alpha > 0 && batchOfPolygons) {\r\n            this.lines.push(`\\t\\t\\t\\t<g stroke=\"none\" opacity=\"${alpha}\">`);\r\n\r\n            const halfWidth = 0.5 * this.width;\r\n            const halfHeight = 0.5 * this.height;\r\n            for (const polygon of batchOfPolygons.items) {\r\n                if (polygon.vertices.length >= 3) {\r\n                    const path: string[] = [];\r\n\r\n                    if (polygon.vertices.length >= 3) {\r\n                        path.push(`M${polygon.vertices[0].x + halfWidth} ${polygon.vertices[0].y + halfHeight}`);\r\n                        for (let iP = 1; iP < polygon.vertices.length; iP++) {\r\n                            path.push(`L${polygon.vertices[iP].x + halfWidth} ${polygon.vertices[iP].y + halfHeight}`);\r\n                        }\r\n                    }\r\n\r\n                    if (path.length > 0) {\r\n                        this.lines.push(`\\t\\t\\t\\t\\t<path fill=\"${polygon.color.toHexaString()}\" d=\"${path.join()}\"/>`);\r\n                    }\r\n                }\r\n            }\r\n            this.lines.push(`\\t\\t\\t\\t</g>`);\r\n        }\r\n    }\r\n\r\n    public output(): string {\r\n        return this.lines.join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterSVG,\r\n};\r\n\r\n","import { Color } from \"../misc/color\";\r\nimport * as Loader from \"../misc/loader\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { GeometryId } from \"./geometry-id\";\r\nimport { PlotterCanvas } from \"./plotter-canvas\";\r\nimport { BatchOfLines, BatchOfPolygons } from \"./types\";\r\nimport { IVboBuffer, IVboPart } from \"./vbo-types\";\r\n\r\nimport * as GLCanvas from \"./gl-utils/gl-canvas\";\r\nimport { gl } from \"./gl-utils/gl-canvas\";\r\nimport { Shader } from \"./gl-utils/shader\";\r\nimport * as ShaderManager from \"./gl-utils/shader-manager\";\r\nimport { Viewport } from \"./gl-utils/viewport\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\ninterface IUploadedVboPart extends IVboPart {\r\n    scheduledForDrawing: boolean;\r\n}\r\n\r\n// VBO when it is only on GPU side\r\ninterface IUploadedVbo<T extends IUploadedVboPart> {\r\n    readonly id: WebGLBuffer;\r\n    vboParts: T[];\r\n}\r\n\r\ninterface ILinesVboPart extends IUploadedVboPart {\r\n    color: Color;\r\n    alpha: number;\r\n}\r\n\r\ninterface IPolygonsVboPart extends IUploadedVboPart {\r\n    alpha: number;\r\n}\r\n\r\nclass PlotterWebGLBasic extends PlotterCanvas {\r\n    public static buildLinesVboBuffer(batchesOfLines: BatchOfLines[]): IVboBuffer {\r\n        const bufferParts: IVboPart[] = [];\r\n\r\n        // optim: first, count vertices to be able to pre-reserve space\r\n        let totalNbVertices = 0;\r\n        for (const batchOfLines of batchesOfLines) {\r\n            const indexOfFirstVertice = totalNbVertices;\r\n\r\n            let batchVerticesCount = 0;\r\n            for (const line of batchOfLines.items) {\r\n                if (line.length >= 2) {\r\n                    batchVerticesCount += 2 + 2 * (line.length - 2);\r\n                }\r\n            }\r\n            totalNbVertices += batchVerticesCount;\r\n\r\n            bufferParts.push({\r\n                indexOfFirstVertice,\r\n                verticesCount: batchVerticesCount,\r\n                geometryId: batchOfLines.geometryId.copy(),\r\n            });\r\n        }\r\n\r\n        const FLOATS_PER_VERTICE = 2;\r\n        const buffer = new Float32Array(FLOATS_PER_VERTICE * totalNbVertices);\r\n        let i = 0;\r\n        for (const batchOfLines of batchesOfLines) {\r\n            for (const line of batchOfLines.items) {\r\n                if (line.length >= 2) {\r\n                    buffer[i++] = line[0].x;\r\n                    buffer[i++] = line[0].y;\r\n\r\n                    for (let iP = 1; iP < line.length - 1; iP++) {\r\n                        buffer[i++] = line[iP].x;\r\n                        buffer[i++] = line[iP].y;\r\n                        buffer[i++] = line[iP].x;\r\n                        buffer[i++] = line[iP].y;\r\n                    }\r\n\r\n                    buffer[i++] = line[line.length - 1].x;\r\n                    buffer[i++] = line[line.length - 1].y;\r\n                }\r\n            }\r\n        }\r\n        if (i !== buffer.length) {\r\n            console.log(\"ALERT LINES\");\r\n        }\r\n\r\n        return {\r\n            buffer,\r\n            bufferParts,\r\n        };\r\n    }\r\n\r\n    public static buildPolygonsVboBuffer(batchesOfPolygons: BatchOfPolygons[]): IVboBuffer {\r\n        const bufferParts: IVboPart[] = [];\r\n\r\n        // optim: first, count vertices to be able to pre-reserve space\r\n        let totalNbVertices = 0;\r\n        for (const batchOfPolygons of batchesOfPolygons) {\r\n            const indexOfFirstVertice = totalNbVertices;\r\n\r\n            let batchVerticesCount = 0;\r\n            for (const polygon of batchOfPolygons.items) {\r\n                if (polygon.vertices.length >= 3) {\r\n                    batchVerticesCount += 3 * (polygon.vertices.length - 2);\r\n                }\r\n            }\r\n            totalNbVertices += batchVerticesCount;\r\n\r\n            bufferParts.push({\r\n                indexOfFirstVertice,\r\n                verticesCount: batchVerticesCount,\r\n                geometryId: batchOfPolygons.geometryId.copy(),\r\n            });\r\n        }\r\n\r\n        const FLOATS_PER_VERTICE = 5;\r\n        const buffer = new Float32Array(FLOATS_PER_VERTICE * totalNbVertices);\r\n        let i = 0;\r\n        for (const batchOfPolygons of batchesOfPolygons) {\r\n            for (const polygon of batchOfPolygons.items) {\r\n                if (polygon.vertices.length >= 3) {\r\n                    const red = polygon.color.r / 255;\r\n                    const green = polygon.color.g / 255;\r\n                    const blue = polygon.color.b / 255;\r\n\r\n                    for (let iP = 1; iP < polygon.vertices.length - 1; iP++) {\r\n                        buffer[i++] = polygon.vertices[0].x;\r\n                        buffer[i++] = polygon.vertices[0].y;\r\n                        buffer[i++] = red;\r\n                        buffer[i++] = green;\r\n                        buffer[i++] = blue;\r\n\r\n                        buffer[i++] = polygon.vertices[iP].x;\r\n                        buffer[i++] = polygon.vertices[iP].y;\r\n                        buffer[i++] = red;\r\n                        buffer[i++] = green;\r\n                        buffer[i++] = blue;\r\n\r\n                        buffer[i++] = polygon.vertices[iP + 1].x;\r\n                        buffer[i++] = polygon.vertices[iP + 1].y;\r\n                        buffer[i++] = red;\r\n                        buffer[i++] = green;\r\n                        buffer[i++] = blue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            buffer,\r\n            bufferParts,\r\n        };\r\n    }\r\n\r\n    private shaderLines: Shader;\r\n    private shaderPolygons: Shader;\r\n\r\n    private readonly linesVbo: IUploadedVbo<ILinesVboPart>;\r\n    private readonly polygonsVbo: IUploadedVbo<IPolygonsVboPart>;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        const webglFlags = {\r\n            alpha: false,\r\n            antialias: true,\r\n            depth: false,\r\n            stencil: false,\r\n            preserveDrawingBuffer: false,\r\n        };\r\n        if (!GLCanvas.initGL(webglFlags)) {\r\n            return;\r\n        }\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.STENCIL_TEST);\r\n\r\n        PlotterWebGLBasic.asyncLoadShader(\"shaderLines.vert\", \"shaderLines.frag\", (shader: Shader) => {\r\n            this.shaderLines = shader;\r\n        });\r\n\r\n        PlotterWebGLBasic.asyncLoadShader(\"shaderPolygons.vert\", \"shaderPolygons.frag\", (shader: Shader) => {\r\n            this.shaderPolygons = shader;\r\n        });\r\n\r\n        this.linesVbo = {\r\n            id: gl.createBuffer(),\r\n            vboParts: [],\r\n        };\r\n\r\n        this.polygonsVbo = {\r\n            id: gl.createBuffer(),\r\n            vboParts: [],\r\n        };\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return !!this.shaderLines && !!this.shaderPolygons;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color, zoom: Zoom, scaling: number): void {\r\n        for (const vboPart of this.linesVbo.vboParts) {\r\n            vboPart.scheduledForDrawing = false;\r\n        }\r\n\r\n        for (const vboPart of this.polygonsVbo.vboParts) {\r\n            vboPart.scheduledForDrawing = false;\r\n        }\r\n\r\n        Viewport.setFullCanvas(gl);\r\n        gl.clearColor(backgroundColor.r / 255, backgroundColor.g / 255, backgroundColor.b / 255, 1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        const zoomTranslate = zoom.translate;\r\n        const zoomAndScalingAsUniform = [zoom.scale, zoomTranslate.x, zoomTranslate.y, scaling];\r\n        this.shaderLines.u[\"uZoom\"].value = zoomAndScalingAsUniform;\r\n        this.shaderPolygons.u[\"uZoom\"].value = zoomAndScalingAsUniform;\r\n    }\r\n\r\n    public finalize(): void {\r\n        this.drawPolygonsVBO();\r\n        this.drawLinesVBO();\r\n    }\r\n\r\n    public uploadLinesVbo(newLinesVbo: IVboBuffer): void {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.linesVbo.id);\r\n        gl.bufferData(gl.ARRAY_BUFFER, newLinesVbo.buffer, gl.DYNAMIC_DRAW);\r\n\r\n        this.linesVbo.vboParts = [];\r\n        for (const bufferPart of newLinesVbo.bufferParts) {\r\n            this.linesVbo.vboParts.push({\r\n                indexOfFirstVertice: bufferPart.indexOfFirstVertice,\r\n                verticesCount: bufferPart.verticesCount,\r\n                scheduledForDrawing: false,\r\n                geometryId: bufferPart.geometryId.copy(),\r\n                color: Color.GREEN, // temporary, will be overwritten later\r\n                alpha: 1, // temporary, will be overwritten later\r\n            });\r\n        }\r\n    }\r\n\r\n    public uploadPolygonsVbo(newPolygonsVbo: IVboBuffer): void {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.polygonsVbo.id);\r\n        gl.bufferData(gl.ARRAY_BUFFER, newPolygonsVbo.buffer, gl.DYNAMIC_DRAW);\r\n\r\n        this.polygonsVbo.vboParts = [];\r\n        for (const bufferPart of newPolygonsVbo.bufferParts) {\r\n            this.polygonsVbo.vboParts.push({\r\n                indexOfFirstVertice: bufferPart.indexOfFirstVertice,\r\n                verticesCount: bufferPart.verticesCount,\r\n                scheduledForDrawing: false,\r\n                geometryId: bufferPart.geometryId.copy(),\r\n                alpha: 1, // temporary, will be overwritten later\r\n            });\r\n        }\r\n    }\r\n\r\n    public registerLinesVboPartForDrawing(vboPartId: GeometryId, color: Color, alpha: number): boolean {\r\n        const uploadedVBOPart = PlotterWebGLBasic.findUploadedVBOPart(this.linesVbo, vboPartId);\r\n        if (uploadedVBOPart) {\r\n            uploadedVBOPart.color = color;\r\n            uploadedVBOPart.alpha = alpha;\r\n            uploadedVBOPart.scheduledForDrawing = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public registerPolygonsVboPartForDrawing(vboPartId: GeometryId, alpha: number): boolean {\r\n        const uploadedVBOPart = PlotterWebGLBasic.findUploadedVBOPart(this.polygonsVbo, vboPartId);\r\n        if (uploadedVBOPart) {\r\n            uploadedVBOPart.alpha = alpha;\r\n            uploadedVBOPart.scheduledForDrawing = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private drawLinesVBO(): void {\r\n        const vbpPartsScheduledForDrawing = PlotterWebGLBasic.selectVBOPartsScheduledForDrawing(this.linesVbo);\r\n\r\n        if (this.shaderLines && vbpPartsScheduledForDrawing.length > 0) {\r\n            this.shaderLines.use();\r\n\r\n            const aVertexLocation = this.shaderLines.a[\"aVertex\"].loc;\r\n            gl.enableVertexAttribArray(aVertexLocation);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.linesVbo.id);\r\n            gl.vertexAttribPointer(aVertexLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n            this.shaderLines.u[\"uScreenSize\"].value = [0.5 * this.width, -0.5 * this.height];\r\n\r\n            let currentVboPartId = 0;\r\n            while (currentVboPartId < vbpPartsScheduledForDrawing.length) {\r\n                let currentVboPart = vbpPartsScheduledForDrawing[currentVboPartId];\r\n                const indexOfFirstVertice = currentVboPart.indexOfFirstVertice;\r\n                let verticesCount = currentVboPart.verticesCount;\r\n\r\n                let nextVboPart = vbpPartsScheduledForDrawing[currentVboPartId + 1];\r\n                while (PlotterWebGLBasic.canLinesVboPartsBeMerged(currentVboPart, nextVboPart)) {\r\n                    verticesCount += nextVboPart.verticesCount;\r\n                    currentVboPartId++;\r\n                    currentVboPart = nextVboPart;\r\n                    nextVboPart = vbpPartsScheduledForDrawing[currentVboPartId + 1];\r\n                }\r\n\r\n                this.shaderLines.u[\"uColor\"].value = [currentVboPart.color.r / 255, currentVboPart.color.g / 255, currentVboPart.color.b / 255, currentVboPart.alpha];\r\n                this.shaderLines.bindUniforms();\r\n                gl.drawArrays(gl.LINES, indexOfFirstVertice, verticesCount);\r\n\r\n                currentVboPartId++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawPolygonsVBO(): void {\r\n        const vbpPartsScheduledForDrawing = PlotterWebGLBasic.selectVBOPartsScheduledForDrawing(this.polygonsVbo);\r\n\r\n        if (this.shaderPolygons && vbpPartsScheduledForDrawing.length > 0) {\r\n            this.shaderPolygons.use();\r\n\r\n            const BYTES_PER_FLOAT = Float32Array.BYTES_PER_ELEMENT;\r\n            const aPositionLoc = this.shaderPolygons.a[\"aPosition\"].loc;\r\n            const aColorLoc = this.shaderPolygons.a[\"aColor\"].loc;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.polygonsVbo.id);\r\n            gl.enableVertexAttribArray(aPositionLoc);\r\n            gl.vertexAttribPointer(aPositionLoc, 2, gl.FLOAT, false, BYTES_PER_FLOAT * 5, 0);\r\n            gl.enableVertexAttribArray(aColorLoc);\r\n            gl.vertexAttribPointer(aColorLoc, 3, gl.FLOAT, false, BYTES_PER_FLOAT * 5, BYTES_PER_FLOAT * 2);\r\n\r\n            this.shaderPolygons.u[\"uScreenSize\"].value = [0.5 * this.width, -0.5 * this.height];\r\n\r\n            for (const vboPart of vbpPartsScheduledForDrawing) {\r\n                this.shaderPolygons.u[\"uAlpha\"].value = vboPart.alpha;\r\n                this.shaderPolygons.bindUniforms();\r\n                gl.drawArrays(gl.TRIANGLES, vboPart.indexOfFirstVertice, vboPart.verticesCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static selectVBOPartsScheduledForDrawing<T extends IUploadedVboPart>(partitionedVBO: IUploadedVbo<T>): T[] {\r\n        return partitionedVBO.vboParts.filter((vboPart: T) => vboPart.scheduledForDrawing);\r\n    }\r\n\r\n    private static findUploadedVBOPart<T extends IUploadedVboPart>(uploadedVBO: IUploadedVbo<T>, searchedGeometryId: GeometryId): T | undefined {\r\n        return uploadedVBO.vboParts.find((vboPart: T) => vboPart.geometryId.isSameAs(searchedGeometryId));\r\n    }\r\n\r\n    private static canLinesVboPartsBeMerged(vboPart1: ILinesVboPart, vboPart2: ILinesVboPart): boolean {\r\n        return vboPart1 && vboPart2 &&\r\n            (vboPart2.indexOfFirstVertice === vboPart1.indexOfFirstVertice + vboPart1.verticesCount) &&\r\n            (vboPart1.color.r === vboPart2.color.r) &&\r\n            (vboPart1.color.g === vboPart2.color.g) &&\r\n            (vboPart1.color.b === vboPart2.color.b) &&\r\n            (vboPart1.alpha === vboPart2.alpha);\r\n    }\r\n\r\n    private static asyncLoadShader(vertexFilename: string, fragmentFilename: string, callback: (shader: Shader) => unknown): void {\r\n        const id = `${vertexFilename}__${fragmentFilename}__${Math.random()}`;\r\n\r\n        Loader.registerLoadingObject(id);\r\n\r\n        ShaderManager.buildShader({\r\n            fragmentFilename,\r\n            vertexFilename,\r\n            injected: {},\r\n        }, (builtShader: Shader | null) => {\r\n            Loader.registerLoadedObject(id);\r\n\r\n            if (builtShader !== null) {\r\n                callback(builtShader);\r\n            } else {\r\n                Page.Demopage.setErrorMessage(`${name}-shader-error`, `Failed to build '${name}' shader.`);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport {\r\n    IVboBuffer,\r\n    IVboPart,\r\n    PlotterWebGLBasic,\r\n};\r\n\r\n","import { Color } from \"../misc/color\";\r\nimport { IPlotter } from \"./plotter-interface\";\r\nimport { PlotterWebGLBasic } from \"./plotter-webgl-basic\";\r\nimport { BatchOfLines, BatchOfPolygons } from \"./types\";\r\n\r\n\r\ninterface IPendingLines {\r\n    readonly batchOfLines: BatchOfLines;\r\n    readonly color: Color;\r\n    readonly alpha: number;\r\n}\r\n\r\ninterface IPendingPolygons {\r\n    readonly batchOfPolygons: BatchOfPolygons;\r\n    readonly alpha: number;\r\n}\r\n\r\nclass PlotterWebGL extends PlotterWebGLBasic implements IPlotter {\r\n    private pendingLinesList: IPendingLines[] = [];\r\n    private pendingPolygonsList: IPendingPolygons[] = [];\r\n\r\n    public finalize(): void {\r\n        if (this.pendingPolygonsList.length > 0) {\r\n            for (const pendingPolygons of this.pendingPolygonsList) {\r\n                if (!this.registerPolygonsVboPartForDrawing(pendingPolygons.batchOfPolygons.geometryId, pendingPolygons.alpha)) {\r\n                    // this VBO part is not uploaded on the GPU yet\r\n                    // => need to reupload everything\r\n                    this.buildAndUploadPolygonsVBO();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            this.pendingPolygonsList = [];\r\n        }\r\n\r\n        if (this.pendingLinesList.length > 0) {\r\n            for (const pendingLines of this.pendingLinesList) {\r\n                if (!this.registerLinesVboPartForDrawing(pendingLines.batchOfLines.geometryId, pendingLines.color, pendingLines.alpha)) {\r\n                    // this VBO part is not uploaded on the GPU yet\r\n                    // => need to reupload everything\r\n                    this.buildAndUploadLinesVBO();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            this.pendingLinesList = [];\r\n        }\r\n\r\n        super.finalize();\r\n    }\r\n\r\n    public drawLines(batchOfLines: BatchOfLines, _thickness: number, color: Color, alpha: number): void {\r\n        this.pendingLinesList.push({ batchOfLines, color, alpha });\r\n    }\r\n\r\n    public drawPolygons(batchOfPolygons: BatchOfPolygons, alpha: number): void {\r\n        this.pendingPolygonsList.push({ batchOfPolygons, alpha });\r\n    }\r\n\r\n    private buildAndUploadLinesVBO(): void {\r\n        const pendingBatchesOfLines: BatchOfLines[] = [];\r\n        for (const pendingLines of this.pendingLinesList) {\r\n            pendingBatchesOfLines.push(pendingLines.batchOfLines);\r\n        }\r\n\r\n        const linesVboBuffer = PlotterWebGLBasic.buildLinesVboBuffer(pendingBatchesOfLines);\r\n        this.uploadLinesVbo(linesVboBuffer);\r\n\r\n        for (const pendingLines of this.pendingLinesList) {\r\n            this.registerLinesVboPartForDrawing(pendingLines.batchOfLines.geometryId, pendingLines.color, pendingLines.alpha);\r\n        }\r\n    }\r\n\r\n    private buildAndUploadPolygonsVBO(): void {\r\n        const pendingBatchesOfPolygons: BatchOfPolygons[] = [];\r\n        for (const pendingPolygons of this.pendingPolygonsList) {\r\n            pendingBatchesOfPolygons.push(pendingPolygons.batchOfPolygons);\r\n        }\r\n\r\n        const polygonsVboBuffer = PlotterWebGLBasic.buildPolygonsVboBuffer(pendingBatchesOfPolygons);\r\n        this.uploadPolygonsVbo(polygonsVboBuffer);\r\n\r\n        for (const pendingPolygons of this.pendingPolygonsList) {\r\n            this.registerPolygonsVboPartForDrawing(pendingPolygons.batchOfPolygons.geometryId, pendingPolygons.alpha);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    PlotterWebGL,\r\n};\r\n\r\n","import { GeometryId } from \"./geometry-id\";\r\n\r\n\r\ninterface IVboPart {\r\n    readonly indexOfFirstVertice: number;\r\n    readonly verticesCount: number;\r\n    readonly geometryId: GeometryId;\r\n}\r\n\r\n// VBO when it is still on CPU side\r\ninterface IVboBuffer {\r\n    readonly buffer: Float32Array;\r\n    readonly bufferParts: IVboPart[];\r\n}\r\n\r\nfunction rehydrateVboBuffer(vboBuffer: IVboBuffer): IVboBuffer {\r\n    const bufferParts: IVboPart[] = [];\r\n    for (const dehydratedBufferPart of vboBuffer.bufferParts) {\r\n        bufferParts.push({\r\n            indexOfFirstVertice: dehydratedBufferPart.indexOfFirstVertice,\r\n            verticesCount: dehydratedBufferPart.verticesCount,\r\n            geometryId: GeometryId.rehydrate(dehydratedBufferPart.geometryId),\r\n        });\r\n    }\r\n\r\n    return {\r\n        buffer: vboBuffer.buffer,\r\n        bufferParts,\r\n    };\r\n}\r\n\r\nexport {\r\n    IVboBuffer,\r\n    IVboPart,\r\n    rehydrateVboBuffer,\r\n};\r\n\r\n","import { TreeNode } from \"../engine/tree-node\";\r\nimport { Color } from \"../misc/color\";\r\nimport { IPoint } from \"../misc/point\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { IPolygon } from \"../plotter/types\";\r\nimport { EPrimitiveType } from \"./primitive-type-enum\";\r\n\r\n\r\ntype Line = IPoint[];\r\n\r\nenum EVisibility {\r\n    OUT_OF_VIEW,\r\n    PARTIALLY_VISIBLE,\r\n    FULLY_VISIBLE,\r\n    COVERS_VIEW,\r\n}\r\n\r\nabstract class PrimitiveBase extends TreeNode implements IPolygon {\r\n    public abstract readonly primitiveType: EPrimitiveType;\r\n\r\n    public subdivision: Line | null = null;\r\n    protected _color: Color;\r\n\r\n    /* Returns how many children are created when subdivided */\r\n    public abstract get subdivisionFactor(): number;\r\n\r\n    protected constructor(color: Color) {\r\n        super();\r\n        this._color = color;\r\n    }\r\n\r\n    public setColor(color: Color, childrenColorVariation: number): void {\r\n        this._color = color;\r\n\r\n        const children = this.getDirectChildren() as PrimitiveBase[];\r\n        for (const child of children) {\r\n            const childColor = this.color.computeCloseColor(childrenColorVariation);\r\n            child.setColor(childColor, childrenColorVariation);\r\n        }\r\n    }\r\n\r\n    public get color(): Color {\r\n        return this._color;\r\n    }\r\n\r\n    public removeChildren(): void {\r\n        super.removeChildren();\r\n        this.subdivision = null;\r\n    }\r\n\r\n    public getOutline(): Line {\r\n        const result = this.vertices;\r\n        result.push(result[0]);\r\n        return result;\r\n    }\r\n\r\n    public zoom(zoom: Zoom, isRoot: boolean): void {\r\n        this.applyZoom(zoom, isRoot);\r\n\r\n        const children = this.getDirectChildren() as PrimitiveBase[];\r\n        for (const child of children) {\r\n            child.zoom(zoom, false);\r\n        }\r\n    }\r\n\r\n    public abstract subdivide(subdivisionBalance: number, childrenColorVariation: number): void;\r\n    public abstract get vertices(): IPoint[];\r\n\r\n    protected abstract applyZoom(zoom: Zoom, isRoot: boolean): void;\r\n    public abstract computeVisibility(viewport: Rectangle): EVisibility;\r\n}\r\n\r\nexport {\r\n    EVisibility,\r\n    PrimitiveBase,\r\n};\r\n\r\n","import * as Arithmetics from \"../misc/arithmetics\";\r\nimport { Color } from \"../misc/color\";\r\nimport { IPoint } from \"../misc/point\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { EVisibility, PrimitiveBase } from \"./primitive-base\";\r\nimport { EPrimitiveType } from \"./primitive-type-enum\";\r\n\r\n\r\nclass PrimitiveQuads extends PrimitiveBase {\r\n    public readonly primitiveType: EPrimitiveType = EPrimitiveType.QUADS;\r\n\r\n    public constructor(\r\n        private readonly topLeft: IPoint,\r\n        private readonly topRight: IPoint,\r\n        private readonly bottomLeft: IPoint,\r\n        private readonly bottomRight: IPoint,\r\n        color: Color) {\r\n        super(color);\r\n    }\r\n\r\n    public get subdivisionFactor(): number {\r\n        return 2;\r\n    }\r\n\r\n    public subdivide(subdivisionBalance: number, childrenColorVariation: number): void {\r\n        this.removeChildren();\r\n\r\n        const minRand = 0.5 * subdivisionBalance;\r\n        const maxRand = 1 - minRand;\r\n        const rand1 = Arithmetics.random(minRand, maxRand);\r\n        const rand2 = Arithmetics.random(minRand, maxRand);\r\n\r\n        const leftToRightDistance = Math.max(Arithmetics.squaredDistance(this.topLeft, this.topRight), Arithmetics.squaredDistance(this.bottomLeft, this.bottomRight));\r\n        const topToBottomDistance = Math.max(Arithmetics.squaredDistance(this.topLeft, this.bottomLeft), Arithmetics.squaredDistance(this.topRight, this.bottomRight));\r\n\r\n        if (leftToRightDistance > topToBottomDistance) { // current is more wide than tall => subdivide vertically\r\n            this.subdivision = [\r\n                Arithmetics.interpolatePoint(this.topLeft, this.topRight, rand1),\r\n                Arithmetics.interpolatePoint(this.bottomLeft, this.bottomRight, rand2),\r\n            ];\r\n\r\n            this.addChildren(\r\n                new PrimitiveQuads(this.topLeft, this.subdivision[0], this.bottomLeft, this.subdivision[1], this.color.computeCloseColor(childrenColorVariation)),\r\n                new PrimitiveQuads(this.subdivision[0], this.topRight, this.subdivision[1], this.bottomRight, this.color.computeCloseColor(childrenColorVariation))\r\n            );\r\n        } else { // current is more tall than wide => subdivide horizontally\r\n            this.subdivision = [\r\n                Arithmetics.interpolatePoint(this.topLeft, this.bottomLeft, rand1),\r\n                Arithmetics.interpolatePoint(this.topRight, this.bottomRight, rand2),\r\n            ];\r\n\r\n            this.addChildren(\r\n                new PrimitiveQuads(this.topLeft, this.topRight, this.subdivision[0], this.subdivision[1], this.color.computeCloseColor(childrenColorVariation)),\r\n                new PrimitiveQuads(this.subdivision[0], this.subdivision[1], this.bottomLeft, this.bottomRight, this.color.computeCloseColor(childrenColorVariation))\r\n            );\r\n        }\r\n    }\r\n\r\n    public get vertices(): IPoint[] {\r\n        return [this.topLeft, this.topRight, this.bottomRight, this.bottomLeft];\r\n    }\r\n\r\n    protected applyZoom(zoom: Zoom, isRoot: boolean): void {\r\n        if (isRoot) {\r\n            zoom.applyToPoint(this.topLeft);\r\n            zoom.applyToPoint(this.topRight);\r\n            zoom.applyToPoint(this.bottomLeft);\r\n            zoom.applyToPoint(this.bottomRight);\r\n        }\r\n\r\n        if (this.subdivision) {\r\n            for (const point of this.subdivision) {\r\n                zoom.applyToPoint(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    public computeVisibility(viewport: Rectangle): EVisibility {\r\n        const topLeftInside = viewport.containsPoint(this.topLeft);\r\n        const topRightInside = viewport.containsPoint(this.topRight);\r\n        const bottomLeftInside = viewport.containsPoint(this.bottomLeft);\r\n        const bottomRightInside = viewport.containsPoint(this.bottomRight);\r\n        if (topLeftInside && topRightInside && bottomLeftInside && bottomRightInside) {\r\n            // viewport is convex so if all vertices are in view, the whole shape is in view\r\n            return EVisibility.FULLY_VISIBLE;\r\n        } else if (topLeftInside || topRightInside || bottomLeftInside || bottomRightInside) {\r\n            return EVisibility.PARTIALLY_VISIBLE;\r\n        } else if (viewport.lineIntersectsBoundaries(this.topLeft, this.topRight) ||\r\n            viewport.lineIntersectsBoundaries(this.topRight, this.bottomRight) ||\r\n            viewport.lineIntersectsBoundaries(this.bottomRight, this.bottomLeft) ||\r\n            viewport.lineIntersectsBoundaries(this.bottomLeft, this.topLeft)) {\r\n            return EVisibility.PARTIALLY_VISIBLE;\r\n        } else {\r\n            // at this point, we know that the primitive is not fully contained in the viewport,\r\n            // and that there are no intersection between edges and viewport bounds\r\n            // => either the shape is out of view or contains the whole viewport\r\n            if (this.isInside(viewport.topLeft)) {\r\n                return EVisibility.COVERS_VIEW;\r\n            } else {\r\n                return EVisibility.OUT_OF_VIEW;\r\n            }\r\n        }\r\n    }\r\n\r\n    private isInside(point: IPoint): boolean {\r\n        const SIDE_TL_TR = Arithmetics.getSide(this.topLeft, this.topRight, point);\r\n        const SIDE_TR_BL = Arithmetics.getSide(this.topRight, this.bottomLeft, point);\r\n        const SIDE_BL_TL = Arithmetics.getSide(this.bottomLeft, this.topLeft, point);\r\n\r\n        if (Arithmetics.areSameSign(SIDE_TL_TR, SIDE_TR_BL, SIDE_BL_TL)) {\r\n            return true;\r\n        }\r\n\r\n        const SIDE_BL_BR = Arithmetics.getSide(this.bottomLeft, this.bottomRight, point);\r\n        const SIDE_BR_TR = Arithmetics.getSide(this.bottomRight, this.topRight, point);\r\n\r\n        if (Arithmetics.areSameSign(SIDE_TR_BL, SIDE_BL_BR, SIDE_BR_TR)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport {\r\n    PrimitiveQuads,\r\n};\r\n\r\n","import * as Arithmetics from \"../misc/arithmetics\";\r\nimport { Color } from \"../misc/color\";\r\nimport { IPoint } from \"../misc/point\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { PrimitiveTriangles } from \"./primitive-triangles\";\r\nimport { EPrimitiveType } from \"./primitive-type-enum\";\r\n\r\n\r\nclass PrimitiveTrianglesNested extends PrimitiveTriangles {\r\n    public readonly primitiveType: EPrimitiveType = EPrimitiveType.NESTED_TRIANGLES;\r\n\r\n    protected midPoint1: IPoint;\r\n    protected midPoint2: IPoint;\r\n    protected midPoint3: IPoint;\r\n\r\n    public constructor(p1: IPoint, p2: IPoint, p3: IPoint, color: Color) {\r\n        super(p1, p2, p3, color);\r\n    }\r\n\r\n    public get subdivisionFactor(): number {\r\n        return 4;\r\n    }\r\n\r\n    public subdivide(subdivisionBalance: number, childrenColorVariation: number): void {\r\n        this.removeChildren();\r\n\r\n        this.midPoint1 = this.randomNewPoint(this.p1, this.p2, subdivisionBalance);\r\n        this.midPoint2 = this.randomNewPoint(this.p2, this.p3, subdivisionBalance);\r\n        this.midPoint3 = this.randomNewPoint(this.p3, this.p1, subdivisionBalance);\r\n\r\n        this.subdivision = [\r\n            this.midPoint1,\r\n            this.midPoint2,\r\n            this.midPoint3,\r\n            this.midPoint1,\r\n        ];\r\n\r\n        this.addChildren(\r\n            new PrimitiveTrianglesNested(this.midPoint1, this.midPoint2, this.midPoint3, this.color.computeCloseColor(childrenColorVariation)),\r\n            new PrimitiveTrianglesNested(this.p1, this.midPoint1, this.midPoint3, this.color.computeCloseColor(childrenColorVariation)),\r\n            new PrimitiveTrianglesNested(this.p2, this.midPoint2, this.midPoint1, this.color.computeCloseColor(childrenColorVariation)),\r\n            new PrimitiveTrianglesNested(this.p3, this.midPoint3, this.midPoint2, this.color.computeCloseColor(childrenColorVariation)),\r\n        );\r\n    }\r\n\r\n    protected applyZoom(zoom: Zoom, isRoot: boolean): void {\r\n        if (isRoot) {\r\n            zoom.applyToPoint(this.p1);\r\n            zoom.applyToPoint(this.p2);\r\n            zoom.applyToPoint(this.p3);\r\n        }\r\n\r\n        if (this.subdivision) {\r\n            zoom.applyToPoint(this.midPoint1);\r\n            zoom.applyToPoint(this.midPoint2);\r\n            zoom.applyToPoint(this.midPoint3);\r\n        }\r\n    }\r\n\r\n    private randomNewPoint(p1: IPoint, p2: IPoint, range: number): IPoint {\r\n        const r = Arithmetics.random(0.5 - 0.5 * range, 0.5 + 0.5 * range);\r\n        return {\r\n            x: p1.x * (1 - r) + p2.x * r,\r\n            y: p1.y * (1 - r) + p2.y * r,\r\n        };\r\n    }\r\n}\r\n\r\nexport { PrimitiveTrianglesNested };\r\n\r\n","import * as Arithmetics from \"../misc/arithmetics\";\r\nimport { Color } from \"../misc/color\";\r\nimport { IPoint } from \"../misc/point\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { EVisibility, PrimitiveBase } from \"./primitive-base\";\r\nimport { EPrimitiveType } from \"./primitive-type-enum\";\r\n\r\n\r\nclass PrimitiveTriangles extends PrimitiveBase {\r\n    public readonly primitiveType: EPrimitiveType = EPrimitiveType.TRIANGLES;\r\n\r\n    public constructor(\r\n        protected readonly p1: IPoint,\r\n        protected readonly p2: IPoint,\r\n        protected readonly p3: IPoint,\r\n        color: Color) {\r\n        super(color);\r\n    }\r\n\r\n    public get subdivisionFactor(): number {\r\n        return 2;\r\n    }\r\n\r\n    public subdivide(subdivisionBalance: number, childrenColorVariation: number): void {\r\n        this.removeChildren();\r\n\r\n        const subdivideInternal = (sourcePoint: IPoint, otherPoint1: IPoint, otherPoint2: IPoint) => {\r\n            const minRand = 0.5 * subdivisionBalance;\r\n            const maxRand = 1 - minRand;\r\n            const rand = Arithmetics.random(minRand, maxRand);\r\n\r\n            this.subdivision = [\r\n                sourcePoint,\r\n                Arithmetics.interpolatePoint(otherPoint1, otherPoint2, rand),\r\n            ];\r\n\r\n            this.addChildren(\r\n                new PrimitiveTriangles(sourcePoint, otherPoint1, this.subdivision[1], this.color.computeCloseColor(childrenColorVariation)),\r\n                new PrimitiveTriangles(sourcePoint, this.subdivision[1], otherPoint2, this.color.computeCloseColor(childrenColorVariation))\r\n            );\r\n        };\r\n\r\n        const distance12 = Arithmetics.squaredDistance(this.p1, this.p2);\r\n        const distance23 = Arithmetics.squaredDistance(this.p2, this.p3);\r\n        const distance31 = Arithmetics.squaredDistance(this.p3, this.p1);\r\n\r\n        if (distance12 > distance23 && distance12 > distance31) {\r\n            subdivideInternal(this.p3, this.p1, this.p2);\r\n        } else if (distance23 > distance12 && distance23 > distance31) {\r\n            subdivideInternal(this.p1, this.p2, this.p3);\r\n        } else {\r\n            subdivideInternal(this.p2, this.p3, this.p1);\r\n        }\r\n    }\r\n\r\n    public get vertices(): IPoint[] {\r\n        return [this.p1, this.p2, this.p3];\r\n    }\r\n\r\n    protected applyZoom(zoom: Zoom, isRoot: boolean): void {\r\n        if (isRoot) {\r\n            zoom.applyToPoint(this.p1);\r\n            zoom.applyToPoint(this.p2);\r\n            zoom.applyToPoint(this.p3);\r\n        }\r\n\r\n        if (this.subdivision) {\r\n            zoom.applyToPoint(this.subdivision[1]);\r\n        }\r\n    }\r\n\r\n    public computeVisibility(viewport: Rectangle): EVisibility {\r\n        const p1InViewport = viewport.containsPoint(this.p1);\r\n        const p2InViewport = viewport.containsPoint(this.p2);\r\n        const p3InViewport = viewport.containsPoint(this.p3);\r\n        if (p1InViewport && p2InViewport && p3InViewport) {\r\n            // viewport is convex so if all vertices are in view, the whole shape is in view\r\n            return EVisibility.FULLY_VISIBLE;\r\n        } else if (p1InViewport || p2InViewport || p3InViewport) {\r\n            return EVisibility.PARTIALLY_VISIBLE;\r\n        } else if (viewport.lineIntersectsBoundaries(this.p1, this.p2) ||\r\n            viewport.lineIntersectsBoundaries(this.p2, this.p3) ||\r\n            viewport.lineIntersectsBoundaries(this.p3, this.p1)) {\r\n            return EVisibility.PARTIALLY_VISIBLE;\r\n        } else {\r\n            // at this point, we know that the primitive is not fully contained in the viewport,\r\n            // and that there are no intersection between edges and viewport bounds\r\n            // => either the shape is out of view or contains the whole viewport\r\n            if (this.isInside(viewport.topLeft)) {\r\n                return EVisibility.COVERS_VIEW;\r\n            } else {\r\n                return EVisibility.OUT_OF_VIEW;\r\n            }\r\n        }\r\n    }\r\n\r\n    private isInside(point: IPoint): boolean {\r\n        const SIDE_1_2 = Arithmetics.getSide(this.p1, this.p2, point);\r\n        const SIDE_2_3 = Arithmetics.getSide(this.p2, this.p3, point);\r\n        const SIDE_3_1 = Arithmetics.getSide(this.p3, this.p1, point);\r\n\r\n        return Arithmetics.areSameSign(SIDE_1_2, SIDE_2_3, SIDE_3_1);\r\n    }\r\n}\r\n\r\nexport { PrimitiveTriangles };\r\n\r\n","enum EPrimitiveType {\r\n    QUADS = \"quads\",\r\n    TRIANGLES = \"triangles\",\r\n    NESTED_TRIANGLES = \"triangles-nested\",\r\n}\r\n\r\nexport { EPrimitiveType };\r\n","import { EPlotter, Parameters } from \"../parameters\";\r\nimport { PlotterCanvas } from \"../plotter/plotter-canvas\";\r\nimport { PlotterCanvas2D } from \"../plotter/plotter-canvas-2d\";\r\nimport { IPlotter } from \"../plotter/plotter-interface\";\r\nimport { PlotterWebGL } from \"../plotter/plotter-webgl\";\r\nimport { TestEngine } from \"./test-engine\";\r\n\r\n\r\nfunction createPlotter(): PlotterCanvas & IPlotter {\r\n    if (Parameters.plotter === EPlotter.CANVAS2D) {\r\n        return new PlotterCanvas2D();\r\n    } else {\r\n        return new PlotterWebGL();\r\n    }\r\n}\r\n\r\nfunction main(): void {\r\n    const plotter = createPlotter();\r\n    const testEngine = new TestEngine();\r\n\r\n    Parameters.resetObservers.push(() => {\r\n        plotter.resizeCanvas();\r\n        testEngine.reset();\r\n    });\r\n\r\n    function mainLoop(): void {\r\n        testEngine.update();\r\n\r\n        if (plotter.isReady) {\r\n            plotter.resizeCanvas();\r\n            testEngine.draw(plotter);\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    mainLoop();\r\n}\r\n\r\nexport {\r\n    main,\r\n};\r\n","import { Color } from \"../misc/color\";\r\nimport { Rectangle } from \"../misc/rectangle\";\r\nimport { Zoom } from \"../misc/zoom\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { GeometryId } from \"../plotter/geometry-id\";\r\nimport { IPlotter } from \"../plotter/plotter-interface\";\r\nimport { BatchOfLines, BatchOfPolygons, Line } from \"../plotter/types\";\r\nimport { EVisibility, PrimitiveBase } from \"../primitives/primitive-base\";\r\nimport { PrimitiveQuads } from \"../primitives/primitive-quads\";\r\nimport { PrimitiveTriangles } from \"../primitives/primitive-triangles\";\r\nimport { EPrimitiveType } from \"../primitives/primitive-type-enum\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nclass TestEngine {\r\n    private readonly testWindow: Rectangle;\r\n    private readonly testWindowBaseWidth: number = 300;\r\n    private readonly testWindowBaseHeight: number = 120;\r\n    private zoom: number = 1;\r\n\r\n    private primitive: PrimitiveBase;\r\n    private readonly batchForPrimitive: BatchOfPolygons;\r\n\r\n    private readonly line: Line;\r\n    private readonly batchForLine: BatchOfLines;\r\n    private readonly batchForWindow: BatchOfLines;\r\n\r\n    private lastPrimitiveVisibilityStatus: EVisibility | null = null;\r\n    private lastLineIntersectingStatus: boolean | null = null;\r\n\r\n    public constructor() {\r\n        this.testWindow = new Rectangle(0, 0, 0, 0);\r\n\r\n        Page.Canvas.Observers.mouseWheel.push((delta: number) => {\r\n            this.zoom += 0.1 * delta;\r\n            if (this.zoom < 0.1) {\r\n                this.zoom = 0.1;\r\n            } else if (this.zoom > 3) {\r\n                this.zoom = 3;\r\n            }\r\n        });\r\n\r\n        this.batchForPrimitive = {\r\n            items: [],\r\n            geometryId: GeometryId.new(),\r\n        };\r\n\r\n        this.line = [{ x: -50, y: -50 }, { x: 70, y: 50 }];\r\n        this.batchForLine = {\r\n            items: [this.line],\r\n            geometryId: GeometryId.new(),\r\n        };\r\n\r\n        this.batchForWindow = {\r\n            items: [],\r\n            geometryId: GeometryId.new(),\r\n        };\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        const color = Color.RED;\r\n\r\n        const primitiveType = Parameters.primitiveType;\r\n        if (primitiveType === EPrimitiveType.QUADS) {\r\n            this.primitive = new PrimitiveQuads(\r\n                { x: -150 * Math.random(), y: -150 * Math.random() }, // top left\r\n                { x: +150 * Math.random(), y: -150 * Math.random() }, // top right\r\n                { x: -150 * Math.random(), y: +150 * Math.random() }, // bottom left\r\n                { x: +150 * Math.random(), y: +150 * Math.random() }, // bottom right\r\n                color,\r\n            );\r\n        } else {\r\n            this.primitive = new PrimitiveTriangles(\r\n                { x: -100 - 50 * Math.random(), y: -100 - 50 * Math.random() },\r\n                { x: +100 + 50 * Math.random(), y: -100 - 50 * Math.random() },\r\n                { x: +100 + 50 * (Math.random() - 0.5), y: +100 + 50 * Math.random() },\r\n                color,\r\n            );\r\n        }\r\n\r\n        this.batchForPrimitive.items.length = 0;\r\n        this.batchForPrimitive.items.push(this.primitive);\r\n        this.batchForPrimitive.geometryId.registerChange();\r\n\r\n        this.lastPrimitiveVisibilityStatus = null;\r\n        this.lastLineIntersectingStatus = null;\r\n    }\r\n\r\n    public update(): boolean {\r\n        this.updateTestWindow();\r\n\r\n        const newPrimitiveVisibilityStatus = this.primitive.computeVisibility(this.testWindow);\r\n        if (this.lastPrimitiveVisibilityStatus !== newPrimitiveVisibilityStatus) {\r\n            if (newPrimitiveVisibilityStatus === EVisibility.COVERS_VIEW) { console.log(\"Primitive coverage: COVERS_VIEW\"); }\r\n            else if (newPrimitiveVisibilityStatus === EVisibility.OUT_OF_VIEW) { console.log(\"Primitive coverage: OUT_OF_VIEW\"); }\r\n            else if (newPrimitiveVisibilityStatus === EVisibility.PARTIALLY_VISIBLE) { console.log(\"Primitive coverage: PARTIALLY_VISIBLE\"); }\r\n            else if (newPrimitiveVisibilityStatus === EVisibility.FULLY_VISIBLE) { console.log(\"Primitive coverage: FULLY_VISIBLE\"); }\r\n            else { throw new Error(`Unknown visibility ${newPrimitiveVisibilityStatus}`); }\r\n\r\n            this.lastPrimitiveVisibilityStatus = newPrimitiveVisibilityStatus;\r\n        }\r\n\r\n        const newLineIntersectionStatus = this.testWindow.lineIntersectsBoundaries(this.line[0], this.line[1]);\r\n        if (this.lastLineIntersectingStatus !== newLineIntersectionStatus) {\r\n            console.log(\"Line intersection: \" + newLineIntersectionStatus);\r\n            this.lastLineIntersectingStatus = newLineIntersectionStatus;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public draw(plotter: IPlotter): void {\r\n        plotter.initialize(Color.BLACK, Zoom.noZoom(), 1);\r\n\r\n        plotter.drawPolygons(this.batchForPrimitive, 1);\r\n\r\n        plotter.drawLines(this.batchForLine, 1, Color.GREEN, 1);\r\n        plotter.drawLines(this.batchForWindow, 1, Color.WHITE, 1);\r\n\r\n        plotter.finalize();\r\n    }\r\n\r\n    private updateTestWindow(): void {\r\n        const canvasSize = Page.Canvas.getSize();\r\n        const mousePosition = Parameters.mousePositionInPixels;\r\n        mousePosition.x -= 0.5 * canvasSize[0];\r\n        mousePosition.y -= 0.5 * canvasSize[1];\r\n\r\n        const testWindowWidth = this.zoom * this.testWindowBaseWidth;\r\n        const testWindowHeight = this.zoom * this.testWindowBaseHeight;\r\n\r\n        this.testWindow.topLeft.x = mousePosition.x - 0.5 * testWindowWidth;\r\n        this.testWindow.topLeft.y = mousePosition.y - 0.5 * testWindowHeight;\r\n        this.testWindow.bottomRight.x = mousePosition.x + 0.5 * testWindowWidth;\r\n        this.testWindow.bottomRight.y = mousePosition.y + 0.5 * testWindowHeight;\r\n\r\n        this.batchForWindow.items[0] = [\r\n            this.testWindow.topLeft,\r\n            { x: this.testWindow.right, y: this.testWindow.top },\r\n            this.testWindow.bottomRight,\r\n            { x: this.testWindow.left, y: this.testWindow.bottom },\r\n            this.testWindow.topLeft,\r\n        ];\r\n        this.batchForWindow.geometryId.registerChange();\r\n    }\r\n}\r\n\r\nexport { TestEngine };\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/ts/main.ts\");\n",""],"names":[],"sourceRoot":""}